/* Copyright 2013-2017 Rene Widera, Benjamin Worpitz, Heiko Burau
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "simulation_defines.hpp"
#include "particles/Identifier.hpp"
#include "compileTime/conversion/MakeSeq.hpp"
#include "identifier/value_identifier.hpp"

#include "particles/traits/FilterByFlag.hpp"
#include "particles/Particles.hpp"
#include <boost/mpl/string.hpp>


#ifndef PARAM_RADIATION
    /* disable radiation calculation */
#   define PARAM_RADIATION 0
#endif


namespace picongpu
{

/*########################### define particle attributes #####################*/

/** describe attributes of a particle*/
using DefaultParticleAttributes = MakeSeq_t<
    position< position_pic >,
    momentum,
    weighting
#if( PARAM_RADIATION == 1 )
    , momentumPrev1
#endif
>;

/*########################### end particle attributes ########################*/

/*########################### define species #################################*/

/*--------------------------- electrons --------------------------------------*/

/* ratio relative to BASE_CHARGE and BASE_MASS */
value_identifier( float_X, MassRatioElectrons, 1.0 );
value_identifier( float_X, ChargeRatioElectrons, 1.0 );

using ParticleFlagsElectrons = bmpl::vector<
    particlePusher< UsedParticlePusher >,
    shape< UsedParticleShape >,
    interpolation< UsedField2Particle >,
    current< UsedParticleCurrentSolver >,
    massRatio< MassRatioElectrons >,
    chargeRatio< ChargeRatioElectrons >
>;

/* define species electrons */
using PIC_Electrons = Particles<
    bmpl::string< 'e' >,
    ParticleFlagsElectrons,
    DefaultParticleAttributes
>;

/*--------------------------- opsitrons -------------------------------------------*/

/* ratio relative to BASE_CHARGE and BASE_MASS */
value_identifier( float_X, MassRatioPositrons, 1.0 );
value_identifier( float_X, ChargeRatioPositrons, -1.0 );

/* ratio relative to BASE_DENSITY */
value_identifier( float_X, DensityRatioPositrons, -1.0 );

using ParticleFlagsPositrons = bmpl::vector<
    particlePusher< UsedParticlePusher >,
    shape< UsedParticleShape >,
    interpolation< UsedField2Particle >,
    current< UsedParticleCurrentSolver >,
    massRatio< MassRatioPositrons >,
    chargeRatio< ChargeRatioPositrons >,
    densityRatio< DensityRatioPositrons >
>;

/* define species positrons */
using PIC_Positrons = Particles<
    bmpl::string< 'p' >,
    ParticleFlagsPositrons,
    DefaultParticleAttributes
>;

/*########################### end species ####################################*/

/** All known particle species of the simulation
 *
 * List all defined particle species from above in this list
 * to make them available to the PIC algorithm.
 */
using VectorAllSpecies = MakeSeq_t<
    PIC_Electrons,
    PIC_Positrons
>;

} // namespace picongpu
