/**
 * Copyright 2014-2015 Axel Huebl, Alexander Debus
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/** Load pre-defined templates */
#include "fields/background/templates/TWTS/TWTS.hpp"

#ifndef PARAM_INCLUDE_FIELDBACKGROUND
#define PARAM_INCLUDE_FIELDBACKGROUND false
#endif

/** Load external background fields
 *
 */
namespace picongpu
{
    class FieldBackgroundE
    {
    public:

        /* Add this additional field for pushing particles */
        static const bool InfluenceParticlePusher = PARAM_INCLUDE_FIELDBACKGROUND;

        /* We use this to calculate your SI input back to our unit system */
        PMACC_ALIGN(unitField, const float3_64);

        /* TWTS E-fields need to be initialized on host,
         * so they can look up global grid dimensions.
         *
         * Note: No PMACC_ALIGN(...) used, since this *additional* memory alignment would require
         *       roughly double the number of registers in the corresponding kernel on the device.
         */
        const templates::twts::EField twtsFieldE;

        /* Constructor is host-only, because of subGrid and halfSimSize initialization */
        HINLINE FieldBackgroundE( const float3_64 unitField ) :

            unitField(unitField),

            twtsFieldE(
                /* focus_y [m], the distance to the laser focus in y-direction */
                30.0e-6,
                /* wavelength [m] */
                0.8e-6,
                /* pulselength [s], sigma of std. gauss for intensity (E^2) */
                10.0e-15 / 2.3548200450309493820231386529194,
                /* w_x [m], cylindrically focused spot size */
                5.0e-6,
                /* w_y [m] */
                0.01,
                /* interaction angle between TWTS laser propagation vector and the y-axis [rad] */
                60. * (PI/180.),
                /* propagation speed of overlap [speed of light]. */
                1.0,
                /* manual time delay [s] if auto_tdelay is false */
                39.3e-6 / SI::SPEED_OF_LIGHT_SI,
                /* Should PIConGPU automatically choose a suitable time delay? [true/false] */
                false )
        {}

        /** Specify your background field E(r,t) here
         *
         * \param cellIdx The total cell id counted from the start at t=0
         * \param currentStep The current time step */
        HDINLINE float3_X
        operator()( const DataSpace<simDim>& cellIdx,
                    const uint32_t currentStep ) const
        {
            /* unit: meter */
            const double WAVE_LENGTH_SI = 0.8e-6;

            /** UNITCONV */
            /* const double UNITCONV_Intens_to_A0 = SI::ELECTRON_CHARGE_SI
                * SI::ELECTRON_CHARGE_SI * 2.0 * WAVE_LENGTH_SI * WAVE_LENGTH_SI / (4.0 * PI * PI
                * SI::ELECTRON_MASS_SI * SI::ELECTRON_MASS_SI * SI::SPEED_OF_LIGHT_SI
                * SI::SPEED_OF_LIGHT_SI * SI::SPEED_OF_LIGHT_SI * SI::SPEED_OF_LIGHT_SI
                * SI::SPEED_OF_LIGHT_SI * SI::EPS0_SI); */
            const double UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI
                * SI::ELECTRON_MASS_SI * SI::SPEED_OF_LIGHT_SI
                * SI::SPEED_OF_LIGHT_SI / SI::ELECTRON_CHARGE_SI;

            /* unit: W / m^2
             * const double _PEAK_INTENSITY_SI = 3.4e19 * 1.0e4;
             * unit: none
             * const double _A0  = _PEAK_INTENSITY_SI * UNITCONV_Intens_to_A0;
             */

            /* unit: none */
            const double _A0  = 1.0;

            /* unit: Volt /meter
             *\todo #738 implement math::vector, native type operations
             */
            const float3_64 invUnitField = float3_64(1.0 / unitField[0],
                                                     1.0 / unitField[1],
                                                     1.0 / unitField[2] );

            /* laser amplitude in picongpu units [ unit: (Volt /meter) / unitField-factor ]
             * Note: the laser amplitude is included in all field components
             * polarization and other properties are established by the peak amplitude
             * normalized twtsFieldE(...)
             */
            const float3_X amplitude = precisionCast<float_X>(
                                float_64(_A0 * UNITCONV_A0_to_Amplitude_SI) * invUnitField );

            /* Note: twtsFieldE(...) is normalized, such that peak amplitude equals unity. */
            return amplitude * twtsFieldE( cellIdx, currentStep );
        }
    };

    class FieldBackgroundB
    {
    public:
        /* Add this additional field for pushing particles */
        static const bool InfluenceParticlePusher = PARAM_INCLUDE_FIELDBACKGROUND;

        /* TWTS B-fields need to be initialized on host,
         * so they can look up global grid dimensions.
         *
         * Note: No PMACC_ALIGN(...) used, since this *additional* memory alignment would require
         *       roughly double the number of registers in the corresponding kernel on the device.
         */
        const templates::twts::BField twtsFieldB;

        /* We use this to calculate your SI input back to our unit system */
        PMACC_ALIGN(unitField, const float3_64);

        HINLINE FieldBackgroundB( const float3_64 unitField ) :

            unitField(unitField),

            twtsFieldB(
                /* focus_y [m], the distance to the laser focus in y-direction */
                30.0e-6,
                /* wavelength [m] */
                0.8e-6,
                /* pulselength [s], sigma of std. gauss for intensity (E^2) */
                10.0e-15 / 2.3548200450309493820231386529194,
                /* w_x [m], cylindrically focused spot size */
                5.0e-6,
                /* w_y [m] */
                0.01,
                /* interaction angle between TWTS laser propagation vector and the y-axis [rad] */
                60. * (PI / 180.),
                /* propagation speed of overlap [speed of light]. */
                1.0,
                /* manual time delay [s] if auto_tdelay is false */
                39.3e-6 / SI::SPEED_OF_LIGHT_SI,
                /* Should PIConGPU automatically choose a suitable time delay? [true / false] */
                false )
        {}

        /** Specify your background field B(r,t) here
         *
         * \param cellIdx The total cell id counted from the start at t=0
         * \param currentStep The current time step */
        HDINLINE float3_X
        operator()( const DataSpace<simDim>& cellIdx,
                    const uint32_t currentStep ) const
        {
            /* unit: meter */
            const double WAVE_LENGTH_SI = 0.8e-6;

            /** UNITCONV */
            /* const double UNITCONV_Intens_to_A0 = SI::ELECTRON_CHARGE_SI
                * SI::ELECTRON_CHARGE_SI * 2.0 * WAVE_LENGTH_SI * WAVE_LENGTH_SI / (4.0 * PI * PI
                * SI::ELECTRON_MASS_SI * SI::ELECTRON_MASS_SI * SI::SPEED_OF_LIGHT_SI
                * SI::SPEED_OF_LIGHT_SI * SI::SPEED_OF_LIGHT_SI * SI::SPEED_OF_LIGHT_SI
                * SI::SPEED_OF_LIGHT_SI * SI::EPS0_SI); */
            const double UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI
                * SI::ELECTRON_MASS_SI * SI::SPEED_OF_LIGHT_SI
                * SI::SPEED_OF_LIGHT_SI / SI::ELECTRON_CHARGE_SI;

            /* unit: W / m^2
             * const double _PEAK_INTENSITY_SI = 3.4e19 * 1.0e4;
             * unit: none
             * const double _A0  = _PEAK_INTENSITY_SI * UNITCONV_Intens_to_A0;
             */

            /** unit: none */
            const double _A0  = 1.0;

            /** unit: Volt /meter */
            const float3_64 invUnitField = float3_64( 1.0 / unitField[0],
                                                      1.0 / unitField[1],
                                                      1.0 / unitField[2] );

            /* laser amplitude in picongpu units [ unit: (Volt/meter) / unitField-factor ]
             * Note: the laser amplitude is included in all field components
             * polarization and other properties are established by the peak amplitude
             * normalized twtsFieldB(...)
             */
            const float3_X amplitude = precisionCast<float_X>(
                    float_64(_A0 * UNITCONV_A0_to_Amplitude_SI) * invUnitField );

            /* Note: twtsFieldB(...) is normalized, such that peak amplitude equals unity. */
            return amplitude * twtsFieldB( cellIdx, currentStep );
        }
    };

    class FieldBackgroundJ
    {
    public:
        /* Add this additional field? */
        static const bool activated = false;

        /* We use this to calculate your SI input back to our unit system */
        PMACC_ALIGN(unitField, const float3_64);

        HDINLINE FieldBackgroundJ( const float3_64 unitField ) : unitField(unitField)
        {}

        /** Specify your background field J(r,t) here
         *
         * \param cellIdx The total cell id counted from the start at t=0
         * \param currentStep The current time step */
        HDINLINE float3_X
        operator()( const DataSpace<simDim>& cellIdx,
                    const uint32_t currentStep ) const
        {
            return float3_X(0.0, 0.0, 0.0);
        }
    };

} /* namespace picongpu */
