/* Copyright 2013-2020 Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Define the precision of typically used floating point types in the
 * simulation.
 *
 * PIConGPU normalizes input automatically, allowing to use single-precision by
 * default for the core algorithms. Note that implementations of various
 * algorithms (usually plugins or non-core components) might still decide to
 * hard-code a different (mixed) precision for some critical operations.
 */

#pragma once

#include <pmacc/ppFunctions.hpp>
#include <pmacc/attribute/FunctionSpecifier.hpp>
#include <list>
#include <boost/program_options.hpp>

#ifdef __CUDA_ARCH__
#   define CREATE_VAR(...) __device__ __VA_ARGS__
#else
#   define CREATE_VAR(...) __VA_ARGS__
#endif

#if( CUPLA_DEVICE_COMPILE == 1) //we are on gpu
#   define PICONGPU_VAR_NAMESPACE(id) globalVariables::PMACC_JOIN(picongpu_var_device,id)
#else
#   define PICONGPU_VAR_NAMESPACE(id) globalVariables::PMACC_JOIN(picongpu_var_host,id)
#endif

#define PICONGPU_VAR_DECL(id,Type, Name)                       \
    namespace PMACC_JOIN(picongpu_var_device,id)               \
    {                                                          \
        __constant__ Type Name;                                \
    } /*namespace pmacc_static_const_vector_device + id */     \
    namespace PMACC_JOIN(picongpu_var_host,id)                 \
    {                                                          \
       Type Name;                                              \
    } /*namespace pmacc_static_const_vector_device + id */


struct IGlobalVariable
{
    template<typename T_Type>
    void uploadToDevice(T_Type * ptr, T_Type value)
    {
        cudaMemcpy(ptr, &value, sizeof(T_Type), cudaMemcpyHostToDevice);
    }

    virtual void help(boost::program_options::options_description&) = 0;
    virtual void update() = 0;
};


struct GlobalRegister
{
    static GlobalRegister& inst()
    {
        static GlobalRegister instance;
        return instance;
    }

    void announce( IGlobalVariable* handle )
    {
        data.push_back( handle );
    }

    void loadHelp( boost::program_options::options_description& desc )
    {
        for( auto& d : data )
        {
            d->help( desc );
        }
    }

    void update()
    {
        for( auto& d : data )
        {
            d->update();
        }
    }

    std::list< IGlobalVariable* > data;
};


template<typename T>
void setGlobalVarValue(T& ptr, const T& value)
{
    ptr = value;
};


#define DECLARE_DO(id, cmdName, cmdDescription, typeSI, varNameSI, defaultValueSI, typeNormalized, varNameNormalized, ...) \
namespace globalVariables{                                                                                              \
    PICONGPU_VAR_DECL(id, typeSI, varNameSI);                                                                           \
    PICONGPU_VAR_DECL(id, typeNormalized, varNameNormalized);                                                           \
}                                                                                                                       \
                                                                                                                        \
struct varNameNormalized                                                                                                \
{                                                                                                                       \
    static HDINLINE typeSI si()                                                                                         \
    {                                                                                                                   \
        return PICONGPU_VAR_NAMESPACE(id)::varNameSI;                                                                                               \
    }                                                                                                                   \
    static HDINLINE typeNormalized pic()                                                                                \
    {                                                                                                                   \
        return PICONGPU_VAR_NAMESPACE(id)::varNameNormalized;                                                                                       \
    }                                                                                                                   \
};                                                                                                                      \
namespace PMACC_JOIN(simulation_,varNameSI)                                                                             \
{                                                                                                                       \
    struct GloablObject : IGlobalVariable                                                                               \
    {                                                                                                                   \
        GloablObject()                                                                                                  \
        {                                                                                                               \
            GlobalRegister::inst().announce(this);                                                                             \
        }                                                                                                               \
        void help(boost::program_options::options_description& desc) override                                           \
        {                                                                                                               \
            using namespace PICONGPU_VAR_NAMESPACE(id);                                                                                 \
            desc.add_options()                                                                                          \
                (cmdName, boost::program_options::value<typeSI>(&varNameSI)->default_value(defaultValueSI), "cmdDescription"); \
        }                                                                                                               \
        void update() override                                                                                          \
        {                                                                                                               \
            auto func = __VA_ARGS__; \
            setGlobalVarValue(PICONGPU_VAR_NAMESPACE(id)::varNameNormalized, func());                                                                                    \
            typeNormalized* ptrNorm;                                                                                    \
            cudaGetSymbolAddress((void **)&ptrNorm, globalVariables::PMACC_JOIN(picongpu_var_device,id)::varNameNormalized); \
            uploadToDevice(ptrNorm, varNameNormalized::pic());                                                           \
            typeSI* ptr;                                                                                                \
            cudaGetSymbolAddress((void **)&ptr, globalVariables::PMACC_JOIN(picongpu_var_device,id)::varNameSI);        \
            uploadToDevice(ptr, varNameNormalized::si());                                                               \
        }                                                                                                               \
    };                                                                                                                  \
    static GloablObject dummy;                                                                                          \
}

#define DECLARE(cmdName, cmdDescription, typeSI, varNameSI, defaultValueSI, typeNormalized, varNameNormalized, ...)     \
    DECLARE_DO(__COUNTER__, cmdName, cmdDescription, typeSI, varNameSI, defaultValueSI, typeNormalized, varNameNormalized, __VA_ARGS__)


namespace picongpu
{

/*! Select a precision for the simulation data
 *  - precision32Bit : use 32Bit floating point numbers
 *                     [significant digits 7 to 8]
 *  - precision64Bit : use 64Bit floating point numbers
 *                     [significant digits 15 to 16]
 */
namespace precisionPIConGPU      = precision32Bit;

/*! Select a precision special operations (can be different from simulation precision)
 *  - precisionPIConGPU : use precision which is selected on top (precisionPIConGPU)
 *  - precision32Bit    : use 32Bit floating point numbers
 *  - precision64Bit    : use 64Bit floating point numbers
 */
namespace precisionSqrt          = precisionPIConGPU;
namespace precisionExp           = precisionPIConGPU;
namespace precisionTrigonometric = precisionPIConGPU;


} // namespace picongpu

#include "picongpu/unitless/precision.unitless"
