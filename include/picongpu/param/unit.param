/* Copyright 2013-2020 Axel Huebl, Rene Widera, Marco Garten, Heiko Burau
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * In this file we define typical scales for normalization of physical
 * quantities aka "units". Usually, a user would not change this file
 * but might use the defined constants in other input files.
 */

#pragma once


namespace picongpu
{

    DEF_UNIT(TIME, "time", "second", "s");
    UNIT_ADD(float_64, TIME, PIC);
    //LEGACY_UNIT(UNIT_TIME, TIME);
#define UNIT_TIME scale(TIME, picongpu::units::PIC, picongpu::units::SI)

    DEF_UNIT(LENGTH, "length", "meter", "m");
    UNIT_ADD(float_64, LENGTH, PIC);
    //LEGACY_UNIT(UNIT_LENGTH, LENGTH);
#define UNIT_LENGTH scale(LENGTH, picongpu::units::PIC, picongpu::units::SI)



    DEF_UNIT(PARTICLES_PER_MACROPARTICLE, "???", "??", "??");
    UNIT_ADD(float_X, PARTICLES_PER_MACROPARTICLE, PIC);
    /** Number of particles per makro particle (= macro particle weighting)
      *  unit: none */


    UNIT_BASE(LENGTH, PIC, [&]()
    {
        return
            float_64( SI::BASE_DENSITY_SI * CELL_WIDTH(units::SI) * CELL_HEIGHT(units::SI) * CELL_DEPTH(units::SI) ) /
            float_64( particles::TYPICAL_PARTICLES_PER_CELL );
    });

    namespace particles
    {
        LEGACY_UNIT(TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE, PARTICLES_PER_MACROPARTICLE);
        //#define TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE scale(PARTICLES_PER_MACROPARTICLE, picongpu::units::PIC, picongpu::units::SI)
#if 0
        /** Number of particles per makro particle (= macro particle weighting)
         *  unit: none */
        CREATE_VAR( float_X TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE());

         =
            float_64( SI::BASE_DENSITY_SI * CELL_WIDTH(units::SI)_SI * CELL_HEIGHT(units::SI) * CELL_DEPTH(units::SI) ) /
            float_64( particles::TYPICAL_PARTICLES_PER_CELL ));
#endif
    }


    /** Unit of mass */
    CREATE_VAR( float_64 UNIT_MASS); // = SI::BASE_MASS_SI * double(particles::TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE()));
    /** Unit of charge */
    CREATE_VAR( float_64 UNIT_CHARGE); // = -1.0 * SI::BASE_CHARGE_SI * double(particles::TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE()));
    /** Unit of energy */
    CREATE_VAR( float_64 UNIT_ENERGY); // = (UNIT_MASS * UNIT_LENGTH * UNIT_LENGTH / (UNIT_TIME * UNIT_TIME)));
    /** Unit of EField: V/m */
    CREATE_VAR( float_64 UNIT_EFIELD); // = 1.0 / (UNIT_TIME * UNIT_TIME / UNIT_MASS / UNIT_LENGTH * UNIT_CHARGE));
    //** Unit of BField: Tesla [T] = Vs/m^2 */
    CREATE_VAR( float_64 UNIT_BFIELD); // = (UNIT_MASS / (UNIT_TIME * UNIT_CHARGE)));

}
