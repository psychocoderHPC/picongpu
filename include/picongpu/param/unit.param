/* Copyright 2013-2020 Axel Huebl, Rene Widera, Marco Garten, Heiko Burau
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * In this file we define typical scales for normalization of physical
 * quantities aka "units". Usually, a user would not change this file
 * but might use the defined constants in other input files.
 */

#pragma once


namespace picongpu
{




    UNIT_BASE(TIME, PIC, [&]()
    {
        return DELTA_T(base::SI);
    });

    UNIT_BASE(LENGTH, PIC, [&]()
    {
        return CELL_WIDTH(base::SI);
    });

    namespace particles
    {
        CREATE_GLOBAL_VAR(float_X, TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE, PIC);
        DEF_GLOBAL_VAR(float_64, TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE, units::scalar, [=](auto x)
        {
            return
                float_64( SI::BASE_DENSITY_SI * CELL_WIDTH(base::SI) * CELL_HEIGHT(base::SI) * CELL_DEPTH(base::SI) ) /
                    float_64( particles::TYPICAL_PARTICLES_PER_CELL );
        });

        GLOBAL_VAR_CONVERSION(TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE, PIC, [=](auto x)
        {
            x = TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE(base::SI);
            return x;
        });
    }



    UNIT_BASE(MASS, PIC, [&]()
    {
        return SI::BASE_MASS_SI * particles::TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE(base::SI);
    });


    UNIT_BASE(CHARGE, PIC, [&]()
    {
        return -1.0 * SI::BASE_CHARGE_SI * particles::TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE(base::SI);
    });

    PIC_DEF_CATEGORY(float_64, ENERGY, units::joule);
    #define UNIT_ENERGY ENERGY(picongpu::base::PIC, picongpu::base::SI)

    UNIT_BASE(ENERGY, PIC, [&]()
    {
        return 1.0;
    });

    PIC_DEF_CATEGORY(float_64, EFIELD, units::volt/units::meter);
    #define UNIT_EFIELD EFIELD(picongpu::base::PIC, picongpu::base::SI)

    UNIT_BASE(EFIELD, PIC, [&]()
    {
        return 1.0;
    });

    PIC_DEF_CATEGORY(float_64, BFIELD, units::ampere/units::meter);
    #define UNIT_BFIELD BFIELD(picongpu::base::PIC, picongpu::base::SI)

    UNIT_BASE(BFIELD, PIC, [&]()
    {
        return 1.0;
    });

}
