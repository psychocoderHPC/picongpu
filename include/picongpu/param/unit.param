/* Copyright 2013-2020 Axel Huebl, Rene Widera, Marco Garten, Heiko Burau
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * In this file we define typical scales for normalization of physical
 * quantities aka "units". Usually, a user would not change this file
 * but might use the defined constants in other input files.
 */

#pragma once


namespace picongpu
{



    PIC_DEF_UNIT(float_64, TIME, "time", "second", "s", [&]()
    {
        return DELTA_T(units::SI);
    });
    #define UNIT_TIME scale(TIME, picongpu::units::PIC, picongpu::units::SI)

    PIC_DEF_UNIT(float_64, LENGTH, "length", "meter", "m", [&]()
    {
        return UNIT_TIME * UNIT_SPEED;
    });
    #define UNIT_LENGTH scale(LENGTH, picongpu::units::PIC, picongpu::units::SI)



    PIC_DEF_UNIT(float_X, PARTICLES_PER_MACROPARTICLE, "???", "??", "??", [&]()
    {
        return
            float_64( SI::BASE_DENSITY_SI * CELL_WIDTH(units::SI) * CELL_HEIGHT(units::SI) * CELL_DEPTH(units::SI) ) /
                float_64( particles::TYPICAL_PARTICLES_PER_CELL );
    });

    namespace particles
    {
        LEGACY_UNIT(TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE, PARTICLES_PER_MACROPARTICLE);
        //#define TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE scale(PARTICLES_PER_MACROPARTICLE, picongpu::units::PIC, picongpu::units::SI)
#if 0
        /** Number of particles per makro particle (= macro particle weighting)
         *  unit: none */
        CREATE_VAR( float_X TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE());

         =
            float_64( SI::BASE_DENSITY_SI * CELL_WIDTH(units::SI)_SI * CELL_HEIGHT(units::SI) * CELL_DEPTH(units::SI) ) /
            float_64( particles::TYPICAL_PARTICLES_PER_CELL ));
#endif
    }


    /** Unit of mass */
    PIC_DEF_UNIT(float_64, MASS, "mass", "kilogram", "kg", [&]()
    {
        return
            SI::BASE_MASS_SI * float_64(particles::TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE());
    });
    #define UNIT_MASS scale(MASS, picongpu::units::PIC, picongpu::units::SI)

    /** Unit of charge */
    /** Unit of mass */
    PIC_DEF_UNIT(float_64, CHARGE, "charge", "??", "???", [&]()
    {
        return
            -1.0 * SI::BASE_CHARGE_SI * double(particles::TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE());
    });
    #define UNIT_CHARGE scale(CHARGE, picongpu::units::PIC, picongpu::units::SI)

    /** Unit of energy */
    PIC_DEF_UNIT(float_64, ENERGY, "energy", "??", "???", [&]()
    {
        return
            (UNIT_MASS * UNIT_LENGTH * UNIT_LENGTH / (UNIT_TIME * UNIT_TIME));
    });
    #define UNIT_ENERGY scale(ENERGY, picongpu::units::PIC, picongpu::units::SI)

    /** Unit of EField: V/m */
    PIC_DEF_UNIT(float_64, EFIELD, "efield", "??", "???", [&]()
    {
        return
            1.0 / (UNIT_TIME * UNIT_TIME / UNIT_MASS / UNIT_LENGTH * UNIT_CHARGE);
    });
    #define UNIT_EFIELD scale(EFIELD, picongpu::units::PIC, picongpu::units::SI)

    //** Unit of BField: Tesla [T] = Vs/m^2 */
    PIC_DEF_UNIT(float_64, BFIELD, "bfield", "??", "???", [&]()
    {
        return
            (UNIT_MASS / (UNIT_TIME * UNIT_CHARGE));
    });
    #define UNIT_BFIELD scale(BFIELD, picongpu::units::PIC, picongpu::units::SI)

}
