/* Copyright 2013-2022 Axel Huebl, Rene Widera, Marco Garten, Heiko Burau
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * In this file we define typical scales for normalization of physical
 * quantities aka "units". Usually, a user would not change this file
 * but might use the defined constants in other input files.
 */

#pragma once


namespace picongpu
{
    /** Unit of time */
    constexpr float_64 setup(unit::si_).unit.time = SI::DELTA_T_SI;
    /** Unit of length */
    constexpr float_64 setup(unit::si_).unit.length = setup(unit::si_).unit.time * setup(unit::si_).unit.speed;

    namespace particles
    {
        /** Typical number of particles per macro particle (= typical macro particle weighting)
         *  unit: none */
        constexpr float_64 TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE
            = (SI::BASE_DENSITY_SI * SI::CELL_WIDTH_SI * SI::CELL_HEIGHT_SI * SI::CELL_DEPTH_SI)
            / float_64(setup().particle.num_per_cellL);
    } // namespace particles


    /** Unit of mass */
    constexpr float_64 setup(unit::si_).unit.mass = SI::BASE_MASS_SI * setup().base.particle.typical_num_particles_per_macroparticle;
    /** Unit of charge */
    constexpr float_64 setup(unit::si_).unit.charge = -1.0 * SI::BASE_CHARGE_SI * setup().base.particle.typical_num_particles_per_macroparticle;
    /** Unit of energy */
    constexpr float_64 setup(unit::si_).unit.energy = (setup(unit::si_).unit.mass * setup(unit::si_).unit.length * setup(unit::si_).unit.length / (setup(unit::si_).unit.time * setup(unit::si_).unit.time));
    /** Unit of EField: V/m */
    constexpr float_64 setup(unit::si_).unit.efield = 1.0 / (setup(unit::si_).unit.time * setup(unit::si_).unit.time / setup(unit::si_).unit.mass / setup(unit::si_).unit.length * setup(unit::si_).unit.charge);
    //** Unit of BField: Tesla [T] = Vs/m^2 */
    constexpr float_64 setup(unit::si_).unit.bfield = (setup(unit::si_).unit.mass / (setup(unit::si_).unit.time * setup(unit::si_).unit.charge));

} // namespace picongpu
