/* Copyright 2013-2023 Axel Huebl, Felix Schmitt, Heiko Burau, Rene Widera,
 *                     Carlchristian Eckert
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Fine-tuning of the particle heap for GPUs: When running on GPUs, we use a
 * high-performance parallel "new" allocator (mallocMC) which can be
 * parametrized here.
 */

#pragma once

#include <pmacc/alpakaHelper/acc.hpp>

#include <mallocMC/mallocMC.hpp>

namespace picongpu
{
    //! configure the CreationPolicy "Scatter"
    struct DeviceHeapConfig
    {
        //! 2MiB page can hold around 256 particle frames
        static constexpr uint32_t pagesize = 2u * 1024u * 1024u;

        /** accessblocksize, regionsize and wastefactor are not conclusively
         * investigated and might be performance sensitive for multiple
         * particle species with heavily varying attributes (frame sizes)
         */
        static constexpr uint32_t accessblocksize = 10u * 1024u * 1024u * 1024u;
        static constexpr uint32_t regionsize = 16u;
        static constexpr uint32_t wastefactor = 1u;

        /** resetfreedpages is used to minimize memory fragmentation with
         * varying frame sizes
         */
        static constexpr bool resetfreedpages = true;
        static constexpr size_t heapsize = 1024llu * 1024llu * 1024llu * 4;
    };

    struct DefaultScatterHashingParams
    {
        static constexpr auto hashingK = 38183;
        static constexpr auto hashingDistMP = 17497;
        static constexpr auto hashingDistWP = 1;
        static constexpr auto hashingDistWPRel = 1;
    };


    /** Define a new allocator
     *
     * This is an allocator resembling the behaviour of the ScatterAlloc
     * algorithm.
     */
    using DeviceHeap = mallocMC::Allocator<
        pmacc::Acc<DIM1>,
        mallocMC::CreationPolicies::Scatter<DeviceHeapConfig, DefaultScatterHashingParams>,
        mallocMC::DistributionPolicies::Noop,
        mallocMC::OOMPolicies::ReturnNull,
        mallocMC::ReservePoolPolicies::AlpakaBuf<pmacc::Acc<DIM1>>,
        mallocMC::AlignmentPolicies::Shrink<>>;

} // namespace picongpu
