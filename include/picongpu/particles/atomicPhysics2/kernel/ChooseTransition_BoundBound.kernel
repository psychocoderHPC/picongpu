/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/particles/atomicPhysics2/CheckForInvalidTransitionType.hpp"
#include "picongpu/particles/atomicPhysics2/ConvertEnumToUint.hpp"
#include "picongpu/particles/atomicPhysics2/enums/LastResortProcessClass.hpp"
#include "picongpu/particles/atomicPhysics2/enums/ProcessClass.hpp"
#include "picongpu/particles/atomicPhysics2/enums/ProcessClassGroup.hpp"
#include "picongpu/particles/atomicPhysics2/enums/TransitionDataSetFor.hpp"
#include "picongpu/particles/atomicPhysics2/enums/TransitionDirection.hpp"
#include "picongpu/particles/atomicPhysics2/enums/TransitionOrderingFor.hpp"
#include "picongpu/particles/atomicPhysics2/enums/TransitionType.hpp"
#include "picongpu/particles/atomicPhysics2/kernel/HistogramMetaData.hpp"
#include "picongpu/particles/atomicPhysics2/rateCalculation/BoundBoundTransitionRates.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>
#include <pmacc/static_assert.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics2::kernel
{
    namespace s_enums = picongpu::particles::atomicPhysics2::enums;

    /** choose specific transition from previously selected transitionType for bound-bound transitions
     *
     * A transition is selected by rolling a random number r, [0,1) and comparing it to the cumulative sums of the
     *  normalized rates of the physical transitions of the transitionType.
     * The transition corresponding to the interval containing r is the chosen and accepted.
     *
     * @tparam T_Histogram type of the histogram
     * @tparam T_n_max number of levels of atomic states in input
     * @tparam T_TransitionDirection direction of transition, i.e. boundBoundUpward or boundBoundDownward?
     * @tparam electronicExcitation is channel active?
     * @tparam electronicDeexcitation is channel active?
     * @tparam spontaneousDeexcitation is channel active?
     */
    template<
        typename T_Histogram,
        uint8_t T_n_max,
        s_enums::TransitionDirection T_TransitionDirection,
        bool T_electronicExcitation,
        bool T_electronicDeexcitation,
        bool T_spontaneousDeexcitation>
    struct ChooseTransitionKernel_BoundBound
    {
        static constexpr s_enums::TransitionDataSet transitionDataSet
            = s_enums::TransitionDataSetFor<s_enums::TransitionType::boundBound, T_TransitionDirection>::dataSet;

        template<typename T_Ion>
        HDINLINE static void printAcceptedTransitionToConsole(T_Ion ion)
        {
            if constexpr(picongpu::atomicPhysics2::debug::kernel::chooseTransition::PRINT_DEBUG_TO_CONSOLE)
                printf(" transitionIndex %u\n", ion[transitionIndex_]);
        }

        /** call operator
         *
         * called by ChooseTransition atomic physics sub-stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param rngFactoryFloat factory for uniformly distributed random number generator, for float_X [0,1)
         * @param localTimeRemainingBox deviceDataBox giving access to the local time remaining of all local super
         * cells
         * @param localElectronHistogramDataBox deviceDataBox giving access to the local
         *  electron histograms of all local superCells
         * @param numberTransitionsBox deviceDataBox giving access to the number of
         *  bound-free transitions for each atomic state
         * @param startIndexBox deviceDataBox giving access to the start index of each
         *  atomic states block of transitions
         * @param transitionDataBox deviceDataBox giving access to bound-bound transition data
         * @param localRateCacheBox deviceDataBox giving access the local rate cache of all local super cells
         * @param ionBox deviceDataBox giving access to the species particle frames of all local super cells
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_RngGeneratorFactoryFloat,
            typename T_AtomicStateDataDataBox,
            typename T_AtomicStateBoundBoundNumberTransitionsDataBox,
            typename T_AtomicStateBoundBoundStartIndexBlockDataBox,
            typename T_BoundBoundTransitionDataBox,
            typename T_LocalTimeRemainingBox,
            typename T_LocalElectronHistogramDataBox,
            typename T_LocalRateCacheBox,
            typename T_IonBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_RngGeneratorFactoryFloat rngFactoryFloat,
            T_AtomicStateDataDataBox const atomicStateDataDataBox,
            T_AtomicStateBoundBoundNumberTransitionsDataBox const numberTransitionsBox,
            T_AtomicStateBoundBoundStartIndexBlockDataBox const startIndexBox,
            T_BoundBoundTransitionDataBox const transitionDataBox,
            T_LocalTimeRemainingBox const localTimeRemainingBox,
            T_LocalElectronHistogramDataBox localElectronHistogramDataBox,
            T_LocalRateCacheBox localRateCacheBox,
            T_IonBox ionBox) const
        {
            // check that correct databoxes are given
            PMACC_CASSERT_MSG(
                number_transition_dataBox_not_bound_bound_based,
                u8(T_AtomicStateBoundBoundNumberTransitionsDataBox::processClassGroup)
                    == u8(s_enums::ProcessClassGroup::boundBoundBased));
            PMACC_CASSERT_MSG(
                startIndex_dataBox_not_bound_bound_based,
                u8(T_AtomicStateBoundBoundStartIndexBlockDataBox::processClassGroup)
                    == u8(s_enums::ProcessClassGroup::boundBoundBased));
            PMACC_CASSERT_MSG(
                transitiondataBox_not_bound_bound_based,
                u8(T_BoundBoundTransitionDataBox::processClassGroup)
                    == u8(s_enums::ProcessClassGroup::boundBoundBased));
            PMACC_CASSERT_MSG(
                wrong_transition_ordering_for_T_transitionDirection,
                u8(T_BoundBoundTransitionDataBox::transitionOrdering)
                    == u8(s_enums::TransitionOrderingFor<T_TransitionDirection>::ordering));

            pmacc::DataSpace<simDim> const superCellIdx(
                areaMapping.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));
            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = superCellIdx - areaMapping.getGuardingSuperCells();

            auto const timeRemaining = localTimeRemainingBox(superCellFieldIdx);
            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            // end kernel if superCell already finished or no particles
            if((timeRemaining <= 0._X) || (!forEachLocalIonBoxEntry.hasParticles()))
                return;

            auto rngGeneratorFloat = rngFactoryFloat(worker, superCellFieldIdx);
            auto& rateCache = localRateCacheBox(superCellFieldIdx);
            T_Histogram& electronHistogram = localElectronHistogramDataBox(superCellFieldIdx);

            // get possible transitions' collectionIndices
            constexpr bool isUpward = (u8(T_TransitionDirection) == u8(s_enums::TransitionDirection::upward));
            constexpr bool electronicChannelActive
                = (T_electronicDeexcitation && !isUpward) || ((T_electronicExcitation && isUpward));
            // UNIT_LENGTH^3
            constexpr float_X volumeScalingFactor
                = pmacc::math::CT::volume<SuperCellSize>::type::value * picongpu::CELL_VOLUME;

            constexpr int numberBins = (electronicChannelActive) ? static_cast<int>(T_Histogram::numberBins) : 0;

            PMACC_SMEM(worker, electronHistData, HistogramMetaData<numberBins>);
            // no need to fill the histogram cache if we do not use the histogram
            if(numberBins != 0)
                electronHistData.fill(worker, electronHistogram, volumeScalingFactor);

            // check whether bound-bound transition and if yes,
            //      extract transition and roll random bin
            forEachLocalIonBoxEntry(
                [&rngGeneratorFloat,
                 &atomicStateDataDataBox,
                 &numberTransitionsBox,
                 &startIndexBox,
                 &transitionDataBox,
                 &electronHistData,
                 &rateCache](T_Worker const& worker, auto& ion)
                {
                    // debug
                    checkForInvalidTransitionType(ion);

                    // reject already accepted macro-ions and other transitionTypes
                    bool const selectedBoundBoundT_TransitionDirectionTransition
                        = (ion[transitionIndex_] == u32(transitionDataSet));
                    if(ion[accepted_] || !selectedBoundBoundT_TransitionDirectionTransition)
                        return;

                    uint32_t const atomicStateCollectionIndex = ion[atomicStateCollectionIndex_];

                    uint32_t numberTransitions;
                    if constexpr(isUpward)
                        numberTransitions = numberTransitionsBox.numberOfTransitionsUp(atomicStateCollectionIndex);
                    else
                        numberTransitions = numberTransitionsBox.numberOfTransitionsDown(atomicStateCollectionIndex);

                    uint32_t startIndexTransitionBlock;
                    if constexpr(isUpward)
                        startIndexTransitionBlock
                            = startIndexBox.startIndexBlockTransitionsUp(atomicStateCollectionIndex);
                    else
                        startIndexTransitionBlock
                            = startIndexBox.startIndexBlockTransitionsDown(atomicStateCollectionIndex);

                    if constexpr(picongpu::atomicPhysics2::debug::kernel::chooseTransition::PRINT_DEBUG_TO_CONSOLE)
                    {
                        printf(
                            "stateIndex %u transitionType %u startIndexTransitionBlock %u numberTransitionsDown %u",
                            atomicStateCollectionIndex,
                            ion[transitionIndex_],
                            startIndexTransitionBlock,
                            numberTransitions);
                    }

                    // get random number
                    float_X const r = rngGeneratorFloat();

                    // compare to cumulative sum of normalized transition rates to find choosen transition

                    /// init with last resort, last possible transition
                    ///@{
                    uint8_t selectedProcessClass
                        = s_enums::LastResort<transitionDataSet>::template processClass<T_spontaneousDeexcitation>();
                    int selectedBinIndex;
                    if constexpr(isUpward || !T_spontaneousDeexcitation)
                        selectedBinIndex = static_cast<int>(numberBins - 1u);
                    else
                        selectedBinIndex = -1;
                    uint32_t selectedTransitionIndex = startIndexTransitionBlock + numberTransitions - 1u;
                    ///@}

                    float_X cumSum = 0._X;
                    for(uint32_t transitionID = 0u; transitionID < numberTransitions; ++transitionID)
                    {
                        /// @todo cache transitionData, Brian Marre, 2023

                        // collisional de-/excitation
                        [[maybe_unused]] int binIndex = 0;
                        if constexpr(electronicChannelActive)
                        {
                            // test for each bin separately
                            for(; binIndex < numberBins; ++binIndex)
                            {
                                float_X const density = electronHistData.density[binIndex];
                                // 1/UNIT_TIME
                                float_X const rateTransition = picongpu::particles::atomicPhysics2::rateCalculation::
                                    BoundBoundTransitionRates<T_n_max>::template rateCollisionalBoundBoundTransition<
                                        T_AtomicStateDataDataBox,
                                        T_BoundBoundTransitionDataBox,
                                        isUpward>(
                                        electronHistData.energy[binIndex],
                                        electronHistData.binWidth[binIndex],
                                        density,
                                        transitionID + startIndexTransitionBlock,
                                        atomicStateDataDataBox,
                                        transitionDataBox);

                                cumSum += rateTransition
                                    / rateCache.rate(u32(transitionDataSet), atomicStateCollectionIndex);

                                // debug only
                                if constexpr(picongpu::atomicPhysics2::debug::kernel::chooseTransition::
                                                 CHECK_FOR_OVERFLOWS_IN_ACCUMULATON)
                                {
                                    if(cumSum - 1._X > 1.e-5)
                                    {
                                        printf("atomicPhyiscs ERROR: cumSum overflow in chooseTranstion_BoundBound "
                                               "collisional\n");
                                        printf("    dataSet = %u\n", u32(transitionDataSet));
                                        printf("    stateIndex = %u\n", atomicStateCollectionIndex);
                                        printf("    transitionID = %u\n", transitionID);
                                        printf("    rateTransition = %f\n", rateTransition);
                                        printf("        binIndex = %i\n", binIndex);
                                        printf("        density = %f\n", density);
                                        printf(
                                            "    rateCache.rate = %.8e\n",
                                            rateCache.rate(u32(transitionDataSet), atomicStateCollectionIndex));
                                        printf("    (cumSum-1)*1e6 = %f\n", (cumSum - 1._X) * 1.e6);
                                    }
                                }

                                // inclusive limit, to make sure that r==1 is assigned a transition
                                if(r <= cumSum)
                                {
                                    // found chosen transition
                                    if constexpr(isUpward)
                                        selectedProcessClass = u8(s_enums::ProcessClass::electronicExcitation);
                                    else
                                        selectedProcessClass = u8(s_enums::ProcessClass::electronicDeexcitation);
                                    selectedTransitionIndex = transitionID + startIndexTransitionBlock;
                                    selectedBinIndex = binIndex;

                                    break;
                                }
                            }
                        }

                        // spontaneousDeexcitation
                        if constexpr(!isUpward && T_spontaneousDeexcitation)
                        {
                            // only if we completed the bin-for-loop without finding a chosen transition
                            if(binIndex == numberBins)
                            {
                                // 1/UNIT_TIME
                                float_X const rateTransition = picongpu::particles::atomicPhysics2::rateCalculation::
                                    BoundBoundTransitionRates<T_n_max>::template rateSpontaneousRadiativeDeexcitation<
                                        T_AtomicStateDataDataBox,
                                        T_BoundBoundTransitionDataBox>(
                                        transitionID + startIndexTransitionBlock,
                                        atomicStateDataDataBox,
                                        transitionDataBox);

                                cumSum += rateTransition
                                    / rateCache.rate(u32(transitionDataSet), atomicStateCollectionIndex);

                                // debug only
                                if constexpr(picongpu::atomicPhysics2::debug::kernel::chooseTransition::
                                                 CHECK_FOR_OVERFLOWS_IN_ACCUMULATON)
                                {
                                    if(cumSum - 1 > 1.e5)
                                    {
                                        printf("atomicPhyiscs ERROR: cumSum overflow in chooseTranstion_BoundBound "
                                               "spontaneous\n");
                                        printf("    dataSet = %u\n", u32(transitionDataSet));
                                        printf("    stateIndex = %u\n", atomicStateCollectionIndex);
                                        printf("    transitionID = %u\n", transitionID);
                                        printf("    rateTransition = %f\n", rateTransition);
                                        printf(
                                            "    rateCache.rate = %f\n",
                                            rateCache.rate(u32(transitionDataSet), atomicStateCollectionIndex));
                                        printf("    (cumSum-1)*1e6 = %.8e\n", (cumSum - 1._X) * 1.e6);
                                    }
                                }

                                // inclusive limit, to make sure that r==1 is assigned a transition
                                if(r <= cumSum)
                                {
                                    // found chosen transition
                                    selectedProcessClass = u8(s_enums::ProcessClass::spontaneousDeexcitation);
                                    selectedTransitionIndex = transitionID + startIndexTransitionBlock;
                                    // ion[binIndex_] not set, since no interaction with a bin happened

                                    break;
                                }
                            }
                        }
                    }

                    // set to ion
                    ion[processClass_] = selectedProcessClass;
                    ion[transitionIndex_] = selectedTransitionIndex;
                    if(electronicChannelActive && (selectedBinIndex != -1))
                        ion[binIndex_] = u32(selectedBinIndex);
                    ion[accepted_] = true;

                    printAcceptedTransitionToConsole(ion);
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics2::kernel
