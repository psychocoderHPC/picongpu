/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp" // need: picongpu/unitless/grid.unitless for CELL_VOLUME

#include "picongpu/particles/atomicPhysics2/ConvertEnumToUint.hpp"
#include "picongpu/particles/atomicPhysics2/RollElectronBin.hpp"
#include "picongpu/particles/atomicPhysics2/processClass/ProcessClass.hpp"
#include "picongpu/particles/atomicPhysics2/processClass/ProcessClassGroup.hpp"
#include "picongpu/particles/atomicPhysics2/processClass/TransitionOrdering.hpp"
#include "picongpu/particles/atomicPhysics2/rateCalculation/BoundFreeTransitionRates.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics2::kernel
{
    namespace detail
    {
        template<uint8_t T_n_max>
        struct RateCollisionalIonization
        {
            template<typename... T_AtomicData>
            HDINLINE static float_X rate(
                float_X const energy,
                float_X const binWidth,
                float_X const density,
                uint32_t const transitionIndex,
                T_AtomicData... atomicData)
            {
                return picongpu::particles::atomicPhysics2::rateCalculation ::BoundFreeTransitionRates<T_n_max>::
                    template rateCollisionalIonizationTransition<T_AtomicData...>(
                        energy,
                        binWidth,
                        density,
                        transitionIndex,
                        atomicData...);
            }
        };
    } // namespace detail

    namespace procClass = picongpu::particles::atomicPhysics2::processClass;

    /** test for accepting electronicExciation transitions
     *
     * @tparam T_Histogram type of the histogram
     * @tparam T_n_max number of levels
     * @tparam T_AcceptanceFunctor functor for acceptance probability
     * @tparam T_excitation
     */
    template<typename T_Histogram, uint8_t T_n_max, typename T_AcceptanceFunctor>
    struct AcceptTransitionTestKernel_ElectronicIonization
    {
        /** call operator
         *
         * called by AcceptTransitionTest atomic physics sub-stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param rngFactory factory for uniformly distributed random number generator
         * @param ionBox deviceDataBox containing the particle frames of all local superCells
         * @param localTimeStepBox deviceDataBox giving access to the atomic physics time
         *  step for all local super cell
         * @param chargeStateDataDataBox deviceDataBox giving access to charge state property data
         * @param atomicStateDataDataBox deviceDataBox giving access to atomic state property data
         * @param boundFreeTransitionDataBox deviceDataBox giving access to bound free transition data
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_RngGeneratorFactoryFloat,
            typename T_IonBox,
            typename T_TimeStepDataBox,
            typename T_LocalElectronHistogramDataBox,
            typename T_ChargeStateDataDataBox,
            typename T_AtomicStateDataDataBox,
            typename T_BoundFreeTransitionDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_RngGeneratorFactoryFloat rngFactory, /// const?, @todo Brian Marre, 2023
            T_IonBox ionBox,
            T_TimeStepDataBox const localTimeStepBox,
            T_LocalElectronHistogramDataBox const localElectronHistogramDataBox,
            T_ChargeStateDataDataBox const chargeStateDataDataBox,
            T_AtomicStateDataDataBox const atomicStateDataDataBox,
            T_BoundFreeTransitionDataBox const boundFreeTransitionDataBox) const
        {
            // check that correct databox given
            PMACC_CASSERT_MSG(
                dataBox_does_not_contain_bound_free_transitions,
                u8(T_BoundFreeTransitionDataBox::processClassGroup)
                    == u8(procClass::ProcessClassGroup::boundFreeBased));
            PMACC_CASSERT_MSG(
                wrong_ordering_of_DataBox,
                u8(T_BoundFreeTransitionDataBox::transitionOrdering)
                    == u8(procClass::TransitionOrdering::byLowerState));

            pmacc::DataSpace<simDim> const superCellIdx(
                areaMapping.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));

            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = superCellIdx - areaMapping.getGuardingSuperCells();

            // get histogram for current superCell
            T_Histogram& electronHistogram = localElectronHistogramDataBox(superCellFieldIdx);

            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            float_X const timeStep = localTimeStepBox(superCellFieldIdx);

            if(timeStep <= 0.0_X)
                return;

            // end kernel if no particles
            if(!forEachLocalIonBoxEntry.hasParticles())
                return;

            auto rngGenerator = rngFactory(worker, superCellFieldIdx);

            // calculate rate of chosen transition and try to accept transition
            forEachLocalIonBoxEntry(
                [&](T_Worker const& worker, auto& ion)
                {
                    namespace procClass = picongpu::particles::atomicPhysics2::processClass;

                    bool const notElectronicIonization
                        = (ion[processClass_] != u8(procClass::ProcessClass::electronicIonization));

                    if(ion[accepted_] || notElectronicIonization)
                        return;

                    // UNIT_LENGTH^3
                    constexpr float_X volumeScalingFactor
                        = pmacc::math::CT::volume<SuperCellSize>::type::value * picongpu::CELL_VOLUME;

                    uint32_t const transitionIndex = ion[transitionIndex_];

                    // calculate rate of entire spectrum
                    float_X rate_total = 0._X;
                    constexpr uint32_t numberBins = T_Histogram::numberBins;
                    for(uint32_t i = 0u; i < numberBins; ++i)
                    {
                        // eV
                        float_X const energy = electronHistogram.getBinEnergy(i);
                        // eV
                        float_X const binWidth = electronHistogram.getBinWidth(i);
                        // 1/(UNIT_LENGTH^3 * eV)
                        float_X const density = electronHistogram.getBinWeight0(i) / volumeScalingFactor / binWidth;

                        // 1/UNIT_TIME
                        rate_total += picongpu::particles::atomicPhysics2::rateCalculation::
                            BoundFreeTransitionRates<T_n_max>::template rateCollisionalIonizationTransition<
                                T_ChargeStateDataDataBox,
                                T_AtomicStateDataDataBox,
                                T_BoundFreeTransitionDataBox>(
                                energy,
                                binWidth,
                                density,
                                transitionIndex,
                                chargeStateDataDataBox,
                                atomicStateDataDataBox,
                                boundFreeTransitionDataBox);
                    }

                    if constexpr(picongpu::atomicPhysics2::debug::kernel::acceptanceTest::CHECK_RATE_LIMIT)
                    {
                        if(rate_total * timeStep > 1._X)
                            printf("atomicPhysics ERROR: too high rate");
                    }

                    // unitless
                    float_X const probability = T_AcceptanceFunctor::probabilityChange(
                        static_cast<float_64>(rate_total),
                        static_cast<float_64>(timeStep));

                    if constexpr(picongpu::atomicPhysics2::debug::kernel::acceptanceTest::
                                     PRINT_ACCEPTANCE_PROBABILITY_TO_CONSOLE)
                        printf(
                            "[electronic Ionization]   timeStep %.3f transition %u \t rate %.8e probability %.8e\n",
                            timeStep,
                            ion[transitionIndex_],
                            rate_total,
                            probability);

                    // try to accept
                    if(probability >= rngGenerator())
                    {
                        ion[accepted_] = true;
                        ion[binIndex_] = picongpu::particles::atomicPhysics2::rollElectronBin::findBin<
                            T_Histogram,
                            detail::RateCollisionalIonization<T_n_max>,
                            T_ChargeStateDataDataBox,
                            T_AtomicStateDataDataBox,
                            T_BoundFreeTransitionDataBox>(
                            rngGenerator(),
                            transitionIndex,
                            rate_total,
                            electronHistogram,
                            chargeStateDataDataBox,
                            atomicStateDataDataBox,
                            boundFreeTransitionDataBox);
                        ;
                    }
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics2::kernel
