/* Copyright 2013-2022 Axel Huebl, Heiko Burau, Rene Widera, Wen Fu,
 *                     Marco Garten, Alexander Grund, Richard Pausch,
 *                     Lennert Sprenger
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/fields/CellType.hpp"
#include "picongpu/fields/FieldB.hpp"
#include "picongpu/fields/FieldE.hpp"
#include "picongpu/particles/InterpolationForPusher.hpp"
#include "picongpu/particles/MoveParticle.hpp"

#include <pmacc/kernel/atomic.hpp>
#include <pmacc/lockstep.hpp>
#include <pmacc/mappings/threads/ThreadCollective.hpp>
#include <pmacc/math/operation.hpp>
#include <pmacc/memory/boxes/CachedBox.hpp>
#include <pmacc/memory/boxes/DataBox.hpp>
#include <pmacc/memory/shared/Allocate.hpp>
#include <pmacc/particles/algorithm/ForEach.hpp>
#include <pmacc/particles/frame_types.hpp>
#include <pmacc/particles/memory/boxes/ParticlesBox.hpp>
#include <pmacc/particles/memory/boxes/TileDataBox.hpp>
#include <pmacc/particles/operations/Assign.hpp>
#include <pmacc/particles/operations/Deselect.hpp>
#include <pmacc/traits/HasFlag.hpp>


namespace picongpu
{
    /** derive new particles from a source species
     *
     * This functor prepares a source and destination particle box to call
     * a user defined functor which allows to derive new particles out of
     * another species.
     *
     * @tparam T_numWorkers number of workers
     */
    template<uint32_t T_numWorkers>
    struct KernelDeriveParticles
    {
        /** frame-wise derive new particles
         *
         * @tparam T_DestParBox pmacc::ParticlesBox, type of the destination species box
         * @tparam T_SrcParBox pmacc::ParticlesBox, type of the source species box
         * @tparam T_ManipulateFunctor type of the user functor to derive a particle
         * @tparam T_Mapping mapping functor type
         *
         * @param destBox particles box for the destination species
         * @param srcBox particles box of the source species
         * @param manipulateFunctor functor to derive a particle out of another one
         *                          must fulfill the interface particles::manipulators::IManipulator
         * @param srcFilterFunctor unary filter to select in the source species
         *                         which particles to derive
         * @param mapper functor to map a block to a supercell
         */
        template<
            typename T_DestParBox,
            typename T_SrcParBox,
            typename T_ManipulateFunctor,
            typename T_SrcFilterFunctor,
            typename T_Mapping,
            typename T_Acc>
        DINLINE void operator()(
            T_Acc const& acc,
            T_DestParBox destBox,
            T_SrcParBox srcBox,
            T_ManipulateFunctor manipulateFunctor,
            T_SrcFilterFunctor srcFilterFunctor,
            T_Mapping const mapper) const
        {
            using namespace pmacc::particles::operations;

            using DestFramePtr = typename T_DestParBox::FramePtr;
            using SrcFramePtr = typename T_SrcParBox::FramePtr;

            constexpr uint32_t frameSize = pmacc::math::CT::volume<SuperCellSize>::type::value;
            constexpr uint32_t numWorker = T_numWorkers;

            uint32_t const workerIdx = cupla::threadIdx(acc).x;

            PMACC_SMEM(acc, srcFrame, SrcFramePtr);
            PMACC_SMEM(acc, destFrame, DestFramePtr);

            DataSpace<simDim> const superCellIdx = mapper.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(acc)));

            // offset of the superCell (in cells, without any guards) to the origin of the local domain
            DataSpace<simDim> const localSuperCellOffset = superCellIdx - mapper.getGuardingSuperCells();

            auto onlyMaster = lockstep::makeMaster(workerIdx);

            onlyMaster(
                [&]()
                {
                    srcFrame = srcBox.getFirstFrame(superCellIdx);
                    if(srcFrame.isValid())
                    {
                        // we have something to clone
                        destFrame = destBox.getEmptyFrame(acc);
                    }
                });

            auto accManipulator = manipulateFunctor(acc, localSuperCellOffset, lockstep::Worker<numWorker>{workerIdx});
            auto accSrcFilter = srcFilterFunctor(acc, localSuperCellOffset, lockstep::Worker<numWorker>{workerIdx});

            cupla::__syncthreads(acc);

            // move over all Frames
            while(srcFrame.isValid())
            {
                // loop over all particles in the frame
                lockstep::makeForEach<frameSize, numWorker>(workerIdx)(
                    [&](uint32_t const linearIdx)
                    {
                        auto parDest = destFrame[linearIdx];
                        auto parSrc = srcFrame[linearIdx];
                        if(parSrc[multiMask_] != 1)
                            parSrc.setHandleInvalid();

                        if(accSrcFilter(acc, parSrc))
                        {
                            assign(parDest, deselect<particleId>(parSrc));

                            accManipulator(acc, parDest, parSrc);
                        }
                    });

                cupla::__syncthreads(acc);

                onlyMaster(
                    [&]()
                    {
                        destBox.setAsLastFrame(acc, destFrame, superCellIdx);

                        srcFrame = srcBox.getNextFrame(srcFrame);
                        if(srcFrame.isValid())
                        {
                            destFrame = destBox.getEmptyFrame(acc);
                        }
                    });
                cupla::__syncthreads(acc);
            }
        }
    };

    /** move over all particles
     *
     * Move frame-wise over a species and call a functor for each particle.
     * This kernel is optimized for the particle push step and handles the
     * special flag `hasLeavingParticle` of the supercell to optimize the kernel shift particles
     * in pmacc.
     *
     * @tparam T_numWorkers number of workers
     * @tparam T_DataDomain pmacc::SuperCellDescription, compile time data domain
     *                      description with a CORE and GUARD
     */
    template<uint32_t T_numWorkers, typename T_DataDomain>
    struct KernelMoveAndMarkParticles
    {
        /** update all particles
         *
         * @tparam T_ParBox pmacc::ParticlesBox, particle box type
         * @tparam T_EBox pmacc::DataBox, electric field box type
         * @tparam T_BBox pmacc::DataBox, magnetic field box type
         * @tparam T_ParticleFunctor particle functor type
         * @tparam T_Mapping mapper functor type
         * @tparam T_Acc alpaka accelerator type
         *
         * @param alpaka accelerator
         * @param pb particle memory
         * @param fieldE electric field data
         * @param fieldB magnetic field data
         * @param particleFunctor functor to manipulate (update) a particle
         * @param mapper functor to map a block to a supercell
         */
        template<
            typename T_ParBox,
            typename T_EBox,
            typename T_BBox,
            typename T_ParticleFunctor,
            typename T_Mapping,
            typename T_Acc>
        DINLINE void operator()(
            T_Acc const& acc,
            T_ParBox pb,
            T_EBox fieldE,
            T_BBox fieldB,
            uint32_t const currentStep,
            T_ParticleFunctor particleFunctor,
            T_Mapping mapper) const
        {
            constexpr uint32_t numWorkers = T_numWorkers;
            uint32_t const workerIdx = cupla::threadIdx(acc).x;

            DataSpace<simDim> const superCellIdx(mapper.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(acc))));

            // relative offset (in cells) to the supercell (including the guard)
            DataSpace<simDim> const superCellOffset = superCellIdx * SuperCellSize::toRT();

            /* worker status flag to mark that a particle is leaving the supercell
             * 1 if at least one particle is leaving the supercell else 0
             */
            int hasLeavingParticle = 0;
            /* shared memory status flag that a particle is leaving the supercell
             * 1 if at least one particle is leaving the supercell else 0
             */
            PMACC_SMEM(acc, mustShiftSupercell, int);

            auto onlyMaster = lockstep::makeMaster(workerIdx);

            onlyMaster([&]() { mustShiftSupercell = 0; });

            auto cachedB = CachedBox::create<0, typename T_BBox::ValueType>(acc, T_DataDomain());
            auto cachedE = CachedBox::create<1, typename T_EBox::ValueType>(acc, T_DataDomain());

            cupla::__syncthreads(acc);

            auto forEachParticle
                = pmacc::particles::algorithm::acc::makeForEach<numWorkers>(workerIdx, pb, superCellIdx);

            // end kernel if we have no particles
            if(!forEachParticle.hasParticles())
                return;

            pmacc::math::operation::Assign assign;
            ThreadCollective<T_DataDomain, numWorkers> collective{workerIdx};

            auto fieldBBlock = fieldB.shift(superCellOffset);
            collective(acc, assign, cachedB, fieldBBlock);

            auto fieldEBlock = fieldE.shift(superCellOffset);
            collective(acc, assign, cachedE, fieldEBlock);

            cupla::__syncthreads(acc);

            forEachParticle(
                acc,
                [&cachedB, &cachedE, currentStep, &hasLeavingParticle, &particleFunctor](
                    auto const& accelerator,
                    auto& particle)
                { particleFunctor(accelerator, particle, cachedB, cachedE, currentStep, hasLeavingParticle); });

            cupla::__syncthreads(acc);

            // update shared memory marker that particles leaving the supercell
            if(hasLeavingParticle == 1 && mustShiftSupercell == 0)
            {
                kernel::atomicAllExch(acc, &mustShiftSupercell, 1, ::alpaka::hierarchy::Threads{});
            }

            cupla::__syncthreads(acc);

            onlyMaster(
                [&]()
                {
                    /* set in SuperCell the hasLeavingParticle flag which is an optimization
                     * for shift particles (pmacc::KernelShiftParticles)
                     */
                    if(mustShiftSupercell == 1)
                    {
                        pb.getSuperCell(mapper.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(acc))))
                            .setMustShift(true);
                    }
                });
        }
    };

    template<class PushAlgo, class TVec, class T_Field2ParticleInterpolation>
    struct PushParticlePerFrame
    {
        template<typename T_Acc, typename T_Particle, class BoxB, class BoxE>
        DINLINE void operator()(
            T_Acc const& acc,
            T_Particle& particle,
            BoxB& bBox,
            BoxE& eBox,
            uint32_t const currentStep,
            int& hasLeavingParticle) const
        {
            using Block = TVec;
            using Field2ParticleInterpolation = T_Field2ParticleInterpolation;

            using BType = typename BoxB::ValueType;
            using EType = typename BoxE::ValueType;

            floatD_X pos = particle[position_];
            const int particleCellIdx = particle[localCellIdx_];

            DataSpace<TVec::dim> localCell(DataSpaceOperations<TVec::dim>::template map<TVec>(particleCellIdx));

            const traits::FieldPosition<fields::CellType, FieldE> fieldPosE;
            const traits::FieldPosition<fields::CellType, FieldB> fieldPosB;

            auto functorEfield = CreateInterpolationForPusher<Field2ParticleInterpolation>()(
                eBox.shift(localCell).toCursor(),
                fieldPosE());
            auto functorBfield = CreateInterpolationForPusher<Field2ParticleInterpolation>()(
                bBox.shift(localCell).toCursor(),
                fieldPosB());

            /** @todo this functor should only manipulate the momentum and all changes
             *        in position and cell below need to go into a separate kernel
             */
            PushAlgo push;
            push(functorBfield, functorEfield, particle, pos, currentStep);

            bool const isParticleMoved = particles::moveParticle(particle, pos);
            if(isParticleMoved)
                hasLeavingParticle = 1;
        }
    };


} // namespace picongpu
