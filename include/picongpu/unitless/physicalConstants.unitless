/* Copyright 2013-2020 Axel Huebl, Rene Widera, Marco Garten, Heiko Burau
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once

namespace picongpu
{
    //! reduced Planck constant
    PIC_DEF_GLOBAL_VAR(float_64, HBAR,
        (
            [&]()
            {
                return SI::HBAR_SI;
            }
        ),
        float_X,
        (
            [&]()
            {
                return static_cast<float_X>(SI::HBAR_SI / UNIT_ENERGY / UNIT_TIME);
            }
        )
    );

    //! Charge of electron
    PIC_DEF_GLOBAL_VAR(float_64, ELECTRON_CHARGE,
        (
            [&]()
            {
                return SI::ELECTRON_CHARGE_SI;
            }
        ),
        float_X,
        (
            [&]()
            {
                return static_cast<float_X>(SI::ELECTRON_CHARGE_SI / UNIT_CHARGE);
            }
        )
    );

    //! Mass of electron
    PIC_DEF_GLOBAL_VAR(float_64, ELECTRON_MASS,
        (
            [&]()
            {
                return SI::ELECTRON_MASS_SI;
            }
        ),
        float_X,
        (
            [&]()
            {
                return static_cast<float_X>(SI::ELECTRON_MASS_SI / UNIT_MASS);
            }
        )
    );

    //! magnetic constexprant must be double 3.92907e-39
    PIC_DEF_GLOBAL_VAR(float_64, MUE0,
        (
            [&]()
            {
                return SI::MUE0_SI;
            }
        ),
        float_X,
        (
            [&]()
            {
                return static_cast<float_X>(SI::MUE0_SI / UNIT_LENGTH / UNIT_MASS * UNIT_CHARGE * UNIT_CHARGE);
            }
        )
    );


    //! electric constexprant must be double 2.54513e+38
    PIC_DEF_GLOBAL_VAR(float_64, EPS0,
        (
            [&]()
            {
                return 1. / MUE0(units::SI) / SI::SPEED_OF_LIGHT_SI / SI::SPEED_OF_LIGHT_SI;
            }
        ),
        float_X,
        (
            [&]()
            {
                return static_cast<float_X>(1. / MUE0(units::PIC) / SPEED_OF_LIGHT / SPEED_OF_LIGHT);
            }
        )
    );

    // = 1/c^2
    PIC_DEF_GLOBAL_VAR(float_64, MUE0_EPS0,
        (
            [&]()
            {
                return 1. / SI::SPEED_OF_LIGHT_SI / SI::SPEED_OF_LIGHT_SI;
            }
        ),
        float_X,
        (
            [&]()
            {
                return static_cast<float_X>(1. / SPEED_OF_LIGHT / SPEED_OF_LIGHT);
            }
        )
    );

    //! Impedance of free space
    PIC_DEF_GLOBAL_VAR(float_64, Z0,
        (
            [&]()
            {
                return MUE0(units::SI) * SI::SPEED_OF_LIGHT_SI;
            }
        ),
        float_X,
        (
            [&]()
            {
                return static_cast<float_X>(MUE0(units::PIC) * SPEED_OF_LIGHT);
            }
        )
    );

    /* Atomic unit of electric field in PIC Efield units */
    CREATE_VAR( float_X ATOMIC_UNIT_EFIELD); // = float_X(SI::ATOMIC_UNIT_EFIELD / UNIT_EFIELD));

    /* Atomic unit of time in PIC units */
    CREATE_VAR( float_X ATOMIC_UNIT_TIME); // = float_X(SI::ATOMIC_UNIT_TIME / UNIT_TIME));

} //namespace picongpu
