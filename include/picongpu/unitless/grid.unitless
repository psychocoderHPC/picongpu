/* Copyright 2013-2020 Felix Schmitt, Heiko Burau, Rene Widera,
 *                     Benjamin Worpitz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include <pmacc/math/Vector.hpp>

namespace picongpu
{
    // normed grid parameter

    UNIT_BASE(TIME, PIC, [&]()
    {
        return DELTA_T(units::SI);
    });

    UNIT_BASE(LENGTH, PIC, [&]()
    {
        return UNIT_TIME * UNIT_SPEED;
    });


    INIT(DELTA_T, PIC, [&]()
    {
        return DELTA_T(units::SI) / UNIT_TIME;
    });

    INIT(CELL_WIDTH, PIC, [&]()
    {
        return CELL_WIDTH(units::SI) / UNIT_LENGTH;
    });

    INIT(CELL_HEIGHT, PIC, [&]()
    {
        return CELL_HEIGHT(units::SI) / UNIT_LENGTH;
    });

    INIT(CELL_DEPTH, PIC, [&]()
    {
        return CELL_DEPTH(units::SI) / UNIT_LENGTH;
    });

    // always a 3D cell, even in 1D3V or 2D3V
    DEF_GLOBAL_VAR(float3_64, cellSize, [&]()
    {
        return float3_64(CELL_WIDTH(units::SI), CELL_HEIGHT(units::SI), CELL_DEPTH(units::SI));
    });
    GLOBAL_VAR_ADD(float3_X, cellSize, PIC);

    INIT(cellSize, PIC, [&]()
    {
        return cellSize(units::SI) * scale(LENGTH, units::SI, units::PIC);
    });

    // volume of a cell
    DEF_GLOBAL_VAR(float_64, CELL_VOLUME, [&]()
    {
        return cellSize(units::SI).productOfComponents();
    });
    GLOBAL_VAR_ADD(float_X, CELL_VOLUME, PIC);

    INIT(CELL_VOLUME, PIC, [&]()
    {
        return cellSize(units::PIC).productOfComponents();
    });

    // only used for CFL checks
#if (SIMDIM==DIM3)
    CREATE_VAR( float_X INV_CELL2_SUM);
#if 0
    =
        1.0 / ( CELL_WIDTH  * CELL_WIDTH  ) +
        1.0 / ( CELL_HEIGHT(units::PIC) * CELL_HEIGHT(units::PIC) ) +
        1.0 / ( CELL_DEPTH  * CELL_DEPTH  ));
#endif
#elif(SIMDIM==DIM2)
    constexpr float_X INV_CELL2_SUM =
        1.0 / ( CELL_WIDTH  * CELL_WIDTH  ) +
        1.0 / ( CELL_HEIGHT(units::PIC) * CELL_HEIGHT(units::PIC) );
#else
    constexpr float_X INV_CELL2_SUM =
        1.0 / ( CELL_WIDTH  * CELL_WIDTH );
#endif

}
