/* Copyright 2013-2021 Axel Huebl, Heiko Burau, Rene Widera, Marco Garten, Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include <pmacc/algorithms/math/floatMath/floatingPoint.tpp>
#include <pmacc/dimensions/SuperCellDescription.hpp>
#include <pmacc/lockstep.hpp>
#include <pmacc/mappings/threads/ThreadCollective.hpp>
#include <pmacc/math/operation.hpp>
#include <pmacc/memory/boxes/CachedBox.hpp>

#include <cstdint>


namespace picongpu
{
    namespace fields
    {
        namespace maxwellSolver
        {
            namespace yee
            {
                /** Functor to update electric field by a time step using standard FDTD with the given curl
                 *
                 * @tparam T_CurlB curl functor type to be applied to magnetic field,
                 *                 adheres to the Curl concept
                 */
                template<typename T_CurlB>
                class UpdateEFunctor
                {
                public:
                    //! Stencil requirements for lower margins
                    using LowerMargin = typename traits::GetLowerMargin<T_CurlB>::type;
                    //! Stencil requirements for upper margins
                    using UpperMargin = typename traits::GetUpperMargin<T_CurlB>::type;

                    /** Update electric field at the given position
                     *
                     * @tparam T_LocalBBox local magnetic field box type
                     * @tparam T_LocalEBox local electric field box type
                     *
                     * @param gridIndex index of the updated field element, with guards
                     * @param localB magnetic field box shifted to position gridIndex,
                     *               note that it is the box, not the value
                     * @param localE electric field box shifted to position gridIndex,
                     *               note that it is the box, not the value
                     *
                     * @return update the value pointed to by localE
                     */
                    template<typename T_LocalBBox, typename T_LocalEBox>
                    DINLINE void operator()(
                        pmacc::DataSpace<simDim> const& gridIndex,
                        T_LocalBBox const localB,
                        T_LocalEBox localE)
                    {
                        constexpr auto c2 = SPEED_OF_LIGHT * SPEED_OF_LIGHT;
                        constexpr auto dt = DELTA_T;
                        localE() += curl(localB) * c2 * dt;
                    }

                private:
                    T_CurlB const curl = T_CurlB{};
                };

                /** Functor to update magnetic field by half a time step using standard FDTD with the given curl
                 *
                 * @tparam T_CurlE curl functor type to be applied to electric field,
                 *                 adheres to the Curl concept
                 */
                template<typename T_CurlE>
                class UpdateBHalfFunctor
                {
                public:
                    //! Stencil requirements for lower margins
                    using LowerMargin = typename traits::GetLowerMargin<T_CurlE>::type;
                    //! Stencil requirements for upper margins
                    using UpperMargin = typename traits::GetUpperMargin<T_CurlE>::type;

                    /** Update magnetic field at the given position
                     *
                     * @tparam T_LocalEBox local electric field box type
                     * @tparam T_LocalBBox local magnetic field box type
                     *
                     * @param gridIndex index of the updated field element, with guards
                     * @param localE electric field box shifted to position gridIndex,
                     *               note that it is the box, not the value
                     * @param localB magnetic field box shifted to position gridIndex,
                     *               note that it is the box, not the value
                     *
                     * @return update the value pointed to by localB
                     */
                    template<typename T_LocalEBox, typename T_LocalBBox>
                    DINLINE void operator()(
                        pmacc::DataSpace<simDim> const& gridIndex,
                        T_LocalEBox const localE,
                        T_LocalBBox localB)
                    {
                        constexpr auto halfDt = 0.5_X * DELTA_T;
                        localB() -= curl(localE) * halfDt;
                    }

                private:
                    T_CurlE const curl = T_CurlE{};
                };

                /** Kernel to update each cell
                 *
                 * @tparam T_numWorkers number of workers
                 */
                template<uint32_t T_numWorkers>
                struct KernelUpdateField
                {
                    /** Update the electric field using the given functor
                     *
                     * @tparam T_Acc alpaka accelerator type
                     * @tparam T_Mapping mapper functor type
                     * @tparam T_StencilFunctor stencil functor type to update a cell
                     * @tparam T_SrcBox pmacc::DataBox, source field box type
                     * @tparam T_DestBox pmacc::DataBox, electric field box type
                     *
                     * @param acc alpaka accelerator
                     * @param mapper functor to map a block to a supercell
                     * @param stencilFunctor stencil functor
                     * @param srcField source field iterator (is not allowed to be an alias of destField data)
                     * @param destField destination field iterator
                     */
                    template<
                        typename T_Acc,
                        typename T_Mapping,
                        typename T_StencilFunctor,
                        typename T_SrcBox,
                        typename T_DestBox>
                    DINLINE void operator()(
                        T_Acc const& acc,
                        T_Mapping const mapper,
                        T_StencilFunctor stencilFunctor,
                        T_SrcBox const srcField,
                        T_DestBox destField) const
                    {
                        /* Each block processes all cells of a supercell,
                         * the index includes guards, same as all indices in this kernel
                         */
                        auto const superCellIdx = mapper.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(acc)))
                            * MappingDesc::SuperCellSize::toRT();

                        constexpr auto numWorkers = T_numWorkers;
                        auto const workerIdx = cupla::threadIdx(acc).x;

                        // Description of the area and guards where the stencil is performed.
                        using StencilCfg = pmacc::SuperCellDescription<
                            SuperCellSize,
                            typename traits::GetLowerMargin<T_StencilFunctor>::type,
                            typename traits::GetUpperMargin<T_StencilFunctor>::type>;
                        /* Cache source field values of the supercell including guard cells to perform the stencil
                         * functor
                         */
                        pmacc::math::operation::Assign assign;
                        auto srcFieldBlock = srcField.shift(superCellIdx);
                        ThreadCollective<StencilCfg, numWorkers> collectiveCacheB(workerIdx);
                        auto cachedSrcField = CachedBox::create<0u, typename T_SrcBox::ValueType>(acc, StencilCfg{});
                        collectiveCacheB(acc, assign, cachedSrcField, srcFieldBlock);

                        cupla::__syncthreads(acc);

                        constexpr uint32_t cellsPerSuperCell = pmacc::math::CT::volume<SuperCellSize>::type::value;
                        // Execute the stencil functor for each cell in the supercell.
                        lockstep::makeForEach<cellsPerSuperCell, numWorkers>(workerIdx)([&](uint32_t const linearIdx) {
                            auto const idxInSuperCell
                                = DataSpaceOperations<simDim>::template map<SuperCellSize>(linearIdx);
                            auto const gridIdx = superCellIdx + idxInSuperCell;
                            stencilFunctor(gridIdx, cachedSrcField.shift(idxInSuperCell), destField.shift(gridIdx));
                        });
                    }
                };
            } // namespace yee
        } // namespace maxwellSolver
    } // namespace fields
} // namespace picongpu
