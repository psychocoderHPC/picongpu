/**
 * Copyright 2013 Axel Huebl, Heiko Burau, Ren√© Widera
 *
 * This file is part of PIConGPU. 
 * 
 * PIConGPU is free software: you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation, either version 3 of the License, or 
 * (at your option) any later version. 
 * 
 * PIConGPU is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with PIConGPU.  
 * If not, see <http://www.gnu.org/licenses/>. 
 */ 
 
#ifndef FIELDE_KERNEL
#define	FIELDE_KERNEL

#include "dimensions/TVec.h"
#include "fields/LaserPhysics.hpp"

#include "simulation_classTypes.hpp"

#include "dimensions/DataSpace.hpp"

#include "memory/boxes/CachedBox.hpp"

#include "nvidia/functors/Assign.hpp"
#include "mappings/threads/ThreadCollective.hpp"

namespace picongpu
{
    using namespace PMacc;

    template<class EBox>
    __global__ void kernelLaserE(EBox fieldE, LaserManipulator lMan)
    {
        uint32_t xOffset = (blockIdx.x * blockDim.x) + threadIdx.x;
        //uint32_t zOffset = (blockIdx.y * blockDim.y) + threadIdx.y;

        /** Calculate how many neighbors to the left we have
         * to initialize the laser in the E-Field
         * 
         * Example: Yee needs one neighbor to perform dB = curlE
         *            -> initialize in y=0 plane
         *          A second order solver could need 2 neighbors left:
         *            -> initialize in y=0 and y=1 plane
         * 
         * Question: Why do other codes initialize the B-Field instead?
         * Answer:   Because our fields are defined on the lower cell side
         *           (C-Style ftw). Therefore, our curls (for example Yee)
         *           are shifted nabla+ <-> nabla- compared to Fortran codes
         *           (in other words: curlLeft <-> curlRight)
         *           for E and B.
         *           For this reason, we have to initialize E instead of B.
         * 
         * Problem: that's still not our case. For example our Yee does a
         *          dE = curlLeft(B) - therefor, we should init B, too.
         */
        //const int max_y_neighbors = Get<fieldSolver::FieldSolver::OffsetOrigin_E, 1 >::value;
        const int max_y_neighbors = 1;

        for( int yOffset = 0; yOffset < max_y_neighbors; ++yOffset )
            /** \todo Right now, the phase could be wrong ( == is cloned)
             *        \See LaserPhysics.hpp
             * 
             *  \todo What about the B-Field in the second plane?
             */
            fieldE /*[zOffset + TILE_DEPTH]*/[MappingDesc::SuperCellSize::y][xOffset + TILE_WIDTH] =
                lMan.getManipulation( DataSpace<simDim > ( xOffset, yOffset ) );
    }

}


#endif  //end FIELDE_KERNEL
