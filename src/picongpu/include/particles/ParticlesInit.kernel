/**
 * Copyright 2013-2015 Axel Huebl, Heiko Burau, Rene Widera, Felix Schmitt,
 *                     Benjamin Worpitz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "simulation_defines.hpp"
#include "particles/Particles.hpp"
#include "memory/boxes/DataBox.hpp"
#include "memory/boxes/PitchedBox.hpp"
#include "dimensions/DataSpaceOperations.hpp"

#include "simulation_defines.hpp"
#include "plugins/radiation/parameters.hpp"
#include "particles/operations/SetAttributeToDefault.hpp"
#include "compileTime/conversion/ResolveAndRemoveFromSeq.hpp"
#include "particles/startPosition/MacroParticleCfg.hpp"
#include "particles/traits/GetDensityRatio.hpp"

namespace picongpu
{

using namespace PMacc;

/** Returns the electron density.
 *  That means:
 *     The REAL number of electrons density in units of volume**-3,
 *       normed to UNIT_LENGHT**3
 *     That is NOT the macro electron density.
 *
 * @param offset The gpu offset (left top front cell in 3D)
 * @param cellIdx the current cell on this gpu
 * @return a float_X which stands for the real number of electrons per volume
 */
template< typename T_Species, typename T_GasProfile>
DINLINE float_X calcRealDensity(T_GasProfile& gasFunctor,
                                const DataSpace<simDim>& totalGpuCellIdx)
{
    static_assert(
        ((GAS_DENSITY) > 0.0f),
        "Please deselect gasInitMethod for your species or set GAS_DENSITY to a value greater than 0.");

    const float_X densityRatioOfSpecies = traits::GetDensityRatio<T_Species>::type::getValue();

    const float_X value = gasFunctor(totalGpuCellIdx) * GAS_DENSITY * densityRatioOfSpecies;
    return value;
}

template<
    typename T_Species>
struct KernelFillGridWithParticles
{
template<
    typename T_Acc,
    typename T_GasProfile,
    typename T_PositionFunctor,
    typename ParBox,
    typename Mapping>
ALPAKA_FN_ACC void operator()(
    T_Acc const & acc,
    T_GasProfile gasFunctor,
    T_PositionFunctor positionFunctor,
    DataSpace<simDim> const & totalGpuCellOffset,
    ParBox const & pb,
    Mapping const & mapper) const
{
    typedef typename ParBox::FrameType FRAME;
    typedef typename Mapping::SuperCellSize SuperCellSize;

    DataSpace<simDim> const blockIndex(alpaka::idx::getIdx<alpaka::Grid, alpaka::Blocks>(acc));
    DataSpace<simDim> const threadIndex(alpaka::idx::getIdx<alpaka::Block, alpaka::Threads>(acc));

    const DataSpace<simDim> superCells(mapper.getGridSuperCells());

    auto frame(alpaka::block::shared::allocVar<FRAME *>(acc));

    alpaka::block::sync::syncBlockThreads(acc); /*wait that all shared memory is initialised*/

    const int linearThreadIdx = DataSpaceOperations<simDim>::template map<SuperCellSize > (threadIndex);
    const DataSpace<simDim> superCellIdx(mapper.getSuperCellIndex(DataSpace<simDim > (blockIndex)));


    /* do not add particle to guarding super cells */
    for (uint32_t d = 0; d < simDim; ++d)
        if (superCellIdx[d] == 0 || superCellIdx[d] == superCells[d] - 1) return;

    /*get local cell idx*/
    const DataSpace<simDim> idx(superCellIdx * SuperCellSize::toRT() + threadIndex);

    /*delete garding cells */
    const DataSpace<simDim> localCellIndex = idx - mapper.getGuardingSuperCells() * SuperCellSize::toRT();

    const DataSpace<simDim> totalGpuCellIdx = totalGpuCellOffset + localCellIndex;
    const float_X realDensity = calcRealDensity<T_Species>(gasFunctor, totalGpuCellIdx);

    const float_X realParticlesPerCell = realDensity * CELL_VOLUME;

    auto finished(alpaka::block::shared::allocVar<int>(acc));
    if (linearThreadIdx == 0)
        finished = 1;
    alpaka::block::sync::syncBlockThreads(acc);

    positionFunctor.init(acc, totalGpuCellIdx);
    // decrease number of macro particles, if weighting would be too small
    particles::startPosition::MacroParticleCfg makroCfg =
        positionFunctor.mapRealToMacroParticle(realParticlesPerCell);
    float_X macroWeighting = makroCfg.weighting;
    uint32_t numParsPerCell = makroCfg.numParticlesPerCell;

    const uint32_t totalNumParsPerCell = numParsPerCell;

    if (numParsPerCell > 0)
        alpaka::atomic::atomicOp<alpaka::atomic::op::Exch>(acc, &finished, 0); //one or more cell has particles to create

    alpaka::block::sync::syncBlockThreads(acc);
    if (finished == 1)
        return; // if there is no particle which has to be created

    if (linearThreadIdx == 0)
    {
        frame = &(pb.getEmptyFrame());
        pb.setAsLastFrame(acc, *frame, superCellIdx);
    }

    alpaka::block::sync::syncBlockThreads(acc);

    // distribute the particles within the cell
    do
    {

        alpaka::block::sync::syncBlockThreads(acc);
        if (linearThreadIdx == 0)
            finished = 1; //clear flag
        alpaka::block::sync::syncBlockThreads(acc);

        floatD_X pos = positionFunctor(totalNumParsPerCell - numParsPerCell);

        if (numParsPerCell > 0)
        {
            PMACC_AUTO(particle, ((*frame)[linearThreadIdx]));

            /** we now initialize all attributes of the new particle to their default values
             *   some attributes, such as the position, localCellIdx, weighting or the
             *   multiMask (\see AttrToIgnore) of the particle will be set individually
             *   in the following lines since they are already known at this point.
             */
            {
                typedef typename ParBox::FrameType FrameType;
                typedef typename FrameType::ValueTypeSeq ParticleAttrList;
                typedef bmpl::vector4<position<>, multiMask, localCellIdx, weighting> AttrToIgnore;
                typedef typename ResolveAndRemoveFromSeq<ParticleAttrList, AttrToIgnore>::type ParticleCleanedAttrList;

                algorithms::forEach::ForEach<ParticleCleanedAttrList,
                    SetAttributeToDefault<bmpl::_1> > setToDefault;
                setToDefault(forward(particle));
            }
            particle[position_] = pos;
            particle[multiMask_] = 1;
            particle[localCellIdx_] = linearThreadIdx;
            particle[weighting_] = macroWeighting;

#if(ENABLE_RADIATION == 1)
#if(RAD_MARK_PARTICLE>1) || (RAD_ACTIVATE_GAMMA_FILTER!=0)
            particle[radiationFlag_] = (bool)(rng() < (1.0 / (float) RAD_MARK_PARTICLE));
#endif
#endif
            numParsPerCell--;
            if (numParsPerCell > 0)
                alpaka::atomic::atomicOp<alpaka::atomic::op::Exch>(acc, &finished, 0); //one or more cell has particles to create
        }
        alpaka::block::sync::syncBlockThreads(acc);
        if (linearThreadIdx == 0 && finished == 0)
        {
            frame = &(pb.getEmptyFrame());
            std::cout<<"ptr "<<frame<<std::endl;
            pb.setAsLastFrame(acc, *frame, superCellIdx);
        }
    }
    while (finished == 0);
}
};

}
