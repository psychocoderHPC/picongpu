/**
 * Copyright 2013 Rene Widera
 *
 * This file is part of PIConGPU. 
 * 
 * PIConGPU is free software: you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation, either version 3 of the License, or 
 * (at your option) any later version. 
 * 
 * PIConGPU is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with PIConGPU.  
 * If not, see <http://www.gnu.org/licenses/>. 
 */



#pragma once

#include "types.h"
#include "particles/Identifier.hpp"
#include "compileTime/conversion/MakeSeq.hpp"
#include "dimensions/DataSpace.hpp"
#include "identifier/identifier.hpp"
#include "identifier/alias.hpp"
#include "identifier/value_identifier.hpp"
#include "identifier/named_type.hpp"

#include "particles/Particles.def"
#include "particles/species/ions/IonMethods.def"
#include "particles/species/electrons/ElectronMethods.def"

#include "particles/ParticleDescription.hpp"

/*enable (1) or disable (0) ions*/
#define ENABLE_IONS 1
/*enable (1) or disable (0) electrons*/
#define ENABLE_ELECTRONS 1

namespace picongpu
{

class ElectronMethods;
class IonMethods;

/** relative (to cell origin) in-cell position of a particle 
 * With this definition we not define any type like float3,double3,...
 * This is only a name without a specialisation
 */
alias(position);
/** cell index the particle lives in, relative to the moving window origin 
 * This alias is only used for dumping hdf5, the index is only valid for the
 * current timestep.
 */
alias(globalCellIdx);

/** specialisation for the relative in-cell position */
value_identifier(float3_X,position_pic,float3_X(0.,0.,0.));
/** momentum at timestep t */
value_identifier(float3_X,momentum,float3_X(0.,0.,0.));
/** momentum at (previous) timestep t-1 */
value_identifier(float3_X,momentumPrev1,float3_X(0.,0.,0.));  
/** weighting of the macro particle */
value_identifier(float_X, weighting, 0.0);
/** use this particle for radiation diagnostics */
value_identifier(bool, radiationFlag, false);
/** specialisation global position inside a domain (relative to origin of the 
 * moving window) 
 * \todo: use simDim (problem is that simDim is defined in componentsConfig.param
 * and is loaded after all other param files)
 */
value_identifier(DataSpace<3>,globalCellIdx_pic,DataSpace<3>());  

/*The next parts is not nice, we change this in a later update with new interfaces
 * \todo: add compile time methods to create particle species
 */

/** describe attributes of a particle*/
typedef typename MakeSeq<position<position_pic>, momentum, weighting>::type DefaultParticleAttributes;

/** define methods to particle*/
typedef typename MakeSeq<ElectronMethods>::type ElectronsMethodsList;
typedef typename MakeSeq<IonMethods>::type IonsMethodsList;


/** \todo: not nice, we change this later with nice interfaces
 * Plugins should add needed attributes
 */

/*add old momentum for radiation plugin*/
typedef typename MakeSeq<
#if(ENABLE_RADIATION == 1)
momentumPrev1
#endif
>::type AttributMomentum_mt1;

/*add old radiation flag for radiation plugin*/
typedef typename MakeSeq<
#if(RAD_MARK_PARTICLE>1) || (RAD_ACTIVATE_GAMMA_FILTER!=0)
radiationFlag
#endif
>::type AttributRadiationFlag;

    alias(usedPusher);
    
typedef
typename MakeSeq<
DefaultParticleAttributes,
AttributMomentum_mt1,
AttributRadiationFlag
>::type DefaultAttributesSeq;

typedef boost::mpl::vector1<usedPusher<PusherBoris> > ParticleFlags;

typedef Particles<ParticleDescription<DefaultAttributesSeq, ElectronsMethodsList, ParticleFlags> > p_Electrons;
typedef Particles<ParticleDescription< DefaultAttributesSeq, IonsMethodsList, ParticleFlags > > p_Ions;

named_type(p_Electrons,
           PIC_Electrons,
           static const uint32_t id = PAR_ELECTRONS;
           static const size_t memPercent = 50;
           );

named_type(p_Ions,
           PIC_Ions,
           static const uint32_t id = PAR_IONS;
           static const size_t memPercent = 50;
           );

/** \todo: not nice, but this should be changed in the future
 *   At the moment diable a species is done by defines, in feuture we only support
 *   adding active particle species to a list
 */
typedef typename MakeSeq<
#if (ENABLE_ELECTRONS == 1)
PIC_Electrons
#endif
>::type Species1;

typedef typename MakeSeq<
#if (ENABLE_IONS == 1)
PIC_Ions
#endif
>::type Species2;

typedef typename MakeSeq<
Species1,
Species2
>::type VectorAllSpecies;

} //namespace picongpu
