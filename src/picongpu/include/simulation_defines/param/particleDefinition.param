/**
 * Copyright 2013 Rene Widera
 *
 * This file is part of PIConGPU. 
 * 
 * PIConGPU is free software: you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation, either version 3 of the License, or 
 * (at your option) any later version. 
 * 
 * PIConGPU is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with PIConGPU.  
 * If not, see <http://www.gnu.org/licenses/>. 
 */



#pragma once

#include "simulation_defines.hpp"
#include "particles/Identifier.hpp"
#include "compileTime/conversion/MakeSeq.hpp"
#include "dimensions/DataSpace.hpp"
#include "identifier/identifier.hpp"
#include "identifier/alias.hpp"
#include "identifier/value_identifier.hpp"
#include "identifier/named_type.hpp"

#include "particles/Particles.hpp"

#include "particles/ParticleDescription.hpp"


#include "particles/shapes.hpp"
#include "algorithms/FieldToParticleInterpolationNative.hpp"
#include "algorithms/FieldToParticleInterpolation.hpp"
#include "algorithms/AssignedTrilinearInterpolation.hpp"

#include "fields/currentDeposition/Solver.def"
#include <boost/mpl/string.hpp>

/*enable (1) or disable (0) ions*/
#define ENABLE_IONS 1
/*enable (1) or disable (0) electrons*/
#define ENABLE_ELECTRONS 1

namespace picongpu
{

/** specialisation global position inside a domain (relative to origin of the 
 * moving window) 
 * \todo: use simDim (problem is that simDim is defined in componentsConfig.param
 * and is loaded after all other param files)
 */
value_identifier(DataSpace<simDim>,globalCellIdx_pic,DataSpace<simDim>());  

/*The next parts is not nice, we change this in a later update with new interfaces
 * \todo: add compile time methods to create particle species
 */

/** describe attributes of a particle*/
typedef typename MakeSeq<position<position_pic>, momentum, weighting>::type DefaultParticleAttributes;


/** \todo: not nice, we change this later with nice interfaces
 * Plugins should add needed attributes
 */

/*add old momentum for radiation plugin*/
typedef typename MakeSeq<
#if(ENABLE_RADIATION == 1)
momentumPrev1
#endif
>::type AttributMomentum_mt1;

/*add old radiation flag for radiation plugin*/
typedef typename MakeSeq<
#if(RAD_MARK_PARTICLE>1) || (RAD_ACTIVATE_GAMMA_FILTER!=0)
radiationFlag
#endif
>::type AttributRadiationFlag;

typedef
typename MakeSeq<
DefaultParticleAttributes,
AttributMomentum_mt1,
AttributRadiationFlag
>::type DefaultAttributesSeq;


typedef particleShape::TSC ElectronShape;
typedef particleShape::CIC IonShape;


/* define which interpolation method is used to interpolate fields to particle*/
typedef FieldToParticleInterpolation<ElectronShape, AssignedTrilinearInterpolation> ElectronField2Particle;
typedef currentSolver::Esirkepov<simDim,ElectronShape> ElectronCurrentSolver;

typedef boost::mpl::vector<
    pusher<particlePusher::Boris>,
    shape<ElectronShape>,
    interpolation<ElectronField2Particle>,
    current<ElectronCurrentSolver>
> ParticleFlagsElectrons;

typedef boost::mpl::vector<
    shape<IonShape>,
    interpolation<FieldToParticleInterpolation<IonShape, AssignedTrilinearInterpolation> >,
    current<currentSolver::VillaBune<IonShape> >
> ParticleFlagsIons;

/*define particle electrons*/
typedef Particles<ParticleDescription<
    boost::mpl::string<'e'>,
    MappingDesc::SuperCellSize,
    DefaultAttributesSeq, 
    ParticleFlagsElectrons,
    typename MakeSeq<CommunicationId<PAR_ELECTRONS>,PercentMemOnGPU<50> >::type  > 
> PIC_Electrons;

/*define particle ions*/
typedef Particles<ParticleDescription<     
    boost::mpl::string<'i'>,
    MappingDesc::SuperCellSize,
    DefaultAttributesSeq,
    ParticleFlagsIons,
    typename MakeSeq<CommunicationId<PAR_IONS>,PercentMemOnGPU<50> >::type > 
> PIC_Ions;

typedef typename MakeSeq<
PIC_Electrons,
PIC_Ions
>::type VectorAllSpecies;

} //namespace picongpu
