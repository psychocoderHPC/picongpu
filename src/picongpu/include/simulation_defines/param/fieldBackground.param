/**
 * Copyright 2014-2015 Axel Huebl, Alexander Debus
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

/** Load external background fields
 *
 */
namespace picongpu
{

class FieldBackgroundE
{
public:
    /* Add this additional field for pushing particles */
    static const bool InfluenceParticlePusher = false;

    /* We use this to calculate your SI input back to our unit system */
    const float3_64 unitField;

    HDINLINE FieldBackgroundE(const float3_64 unitField) : unitField(unitField)
    {
    }

    /** Specify your background field E(r,t) here
     *
     * \param cellIdx The total cell id counted from the start at t = 0
     * \param currentStep The current time step */
    HDINLINE float3_X
    operator()(const DataSpace<simDim>& cellIdx,
               const uint32_t currentStep) const
    {
        float3_64 tmp(float3_64::create(0.));
        if (currentStep < 10)
        {
            const float_64 cell_width = SI::CELL_WIDTH_SI;
            const float3_64 diff = (float3_64::create(32.)-(precisionCast<float_64>(cellIdx))) *
                float3_64::create(cell_width);

            tmp.x() = math::exp(
                                -(diff.x() * diff.x()) / (float_64(2.0) * SI::CELL_WIDTH_SI * SI::CELL_WIDTH_SI)
                                -(diff.y() * diff.y()) / (float_64(2.0) * SI::CELL_HEIGHT_SI * SI::CELL_HEIGHT_SI)
                                -(diff.z() * diff.z()) / (float_64(2.0) * SI::CELL_DEPTH_SI * SI::CELL_DEPTH_SI)
                                );

            float_64 power = float_64(1.0) - math::cos(float_64(2.0) * PI / float_64(20) * float_64(currentStep));
            tmp.x() *= power / unitField.x();
            // tmp.y()=tmp.x()=tmp.z();
        }
        return precisionCast<float_X>(tmp);
    }
};

class FieldBackgroundB
{
public:
    /* Add this additional field for pushing particles */
    static const bool InfluenceParticlePusher = false;

    /* We use this to calculate your SI input back to our unit system */
    const float3_64 unitField;

    HDINLINE FieldBackgroundB(const float3_64 unitField) : unitField(unitField)
    {
    }

    /** Specify your background field B(r,t) here
     *
     * \param cellIdx The total cell id counted from the start at t=0
     * \param currentStep The current time step */
    HDINLINE float3_X
    operator()(const DataSpace<simDim>& cellIdx,
               const uint32_t currentStep) const
    {
        float3_64 tmp(float3_64::create(0.));
        if (currentStep < 10)
        {
            const float_64 cell_width = SI::CELL_WIDTH_SI;
            const float3_64 diff = (float3_64::create(32.)-(precisionCast<float_64>(cellIdx))) *
                float3_64::create(cell_width);

            tmp.y() = math::exp(
                                -(diff.x() * diff.x()) / (float_64(2.0) * SI::CELL_WIDTH_SI * SI::CELL_WIDTH_SI)
                                -(diff.y() * diff.y()) / (float_64(2.0) * SI::CELL_HEIGHT_SI * SI::CELL_HEIGHT_SI)
                                -(diff.z() * diff.z()) / (float_64(2.0) * SI::CELL_DEPTH_SI * SI::CELL_DEPTH_SI)
                                );

            float_64 power = float_64(1.0) - math::cos(float_64(2.0) * PI / float_64(20) * float_64(currentStep));
            tmp.y() *= (power*SI::SPEED_OF_LIGHT_SI) / unitField.y();
            // tmp.y()=tmp.x()=tmp.z();
        }
        return precisionCast<float_X>(tmp);
    }
};

class FieldBackgroundJ
{
public:
    /* Add this additional field? */
    static const bool activated = false;

    /* We use this to calculate your SI input back to our unit system */
    const float3_64 unitField;

    HDINLINE FieldBackgroundJ(const float3_64 unitField) : unitField(unitField)
    {
    }

    /** Specify your background field J(r,t) here
     *
     * \param cellIdx The total cell id counted from the start at t=0
     * \param currentStep The current time step */
    HDINLINE float3_X
    operator()(const DataSpace<simDim>& cellIdx,
               const uint32_t currentStep) const
    {
        /* example: periodicity of 20 microns ( = 2.0e-5 m) */
        const float_64 period_SI(20.0e-6);
        /* calculate cells -> SI -> m to microns*/
        const float_64 y_SI = cellIdx.y() * SI::CELL_HEIGHT_SI * 1.0e6;
        /* note: you can also transform the time step to seconds by
         *       multiplying with DELTA_T_SI */

        /* specify your J-Field in A/m^2 and convert to PIConGPU units */
        const float_X sinArg = precisionCast<float_X>(y_SI / period_SI * 2.0 * PI);
        return float3_X(0.0, math::cos(sinArg) / unitField[1], 0.0);
    }
};

} // namespace picongpu
