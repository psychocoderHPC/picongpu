/* Copyright 2019-2022 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 * configuration file for atomicPhysics, see speciesDefinition.param for
 * actual modeling of atomic Physics of ions.
 */

#pragma once

#include <pmacc/identifier/value_identifier.hpp>

#include <string>

#include <picongpu/particles/atomicPhysics/stateRepresentation/ConfigNumber.hpp>
#include <picongpu/particles/atomicPhysics/stateRepresentation/LevelVector.hpp>

namespace picongpu
{
    namespace atomicPhysics
    {
        // datatype/coding used in representation atomic state
        template<uint8_t T_NumberStates>
        using LevelVector = particles::atomicPhysics::stateRepresentation::LevelVector<float_X, T_NumberStates>;

        /* files containing atomic input data,
         *
         * files are not shipped with PIConGPU, see documentation for creation @todo
         * all paths are either relative to the simOutput folder, or must be absolute
         *
         * only one ion with atomicPhysics possible for now, will change soon @todo
         */
        // state data
        const std::string stateDataFileName = "../ArgonLevels.txt";
        // transition data,
        const std::string transitionDataFileName = "../ArgonTransitions.txt";

        // datatype to be used for configNumber storage
        using configNumberDataType = uint64_t;
        constexpr uint8_t protonNumber = 18u;
        constexpr uint8_t numLevels = 10u;

        // dirty hack, should be specifiable per species independently
        // for now 1: free electron interaction, 2: +photonic spontanous deexcitation
        constexpr uint8_t numProcesses = 2u;

        // histogram parameter
        constexpr float_X initialGridWidth = 1._X; // unit: ATOMIC_setup(unit::si_).unit.energy
        constexpr float_X relativeErrorTarget = 0.5_X; // unit: 1/s /(1/( m^3 * ATOMIC_setup(unit::si_).unit.energy ))
        constexpr uint16_t maxNumBins = 50;

    } // namespace atomicPhysics

    /** atomic levels
     *
     * atomic state of ions, description by levelVector corresponding to a super
     *  configutation
     *
     * Must be defined for each ion species seperatly by giving the number of moddeled
     * atomic Levels N for this species.
     *
     * replaces fylite::Superconfig, since more general
     */

    /* definition of a atomicLevels Object for one species(element), additional must be
     *  added similarly as a new value identifier
     */
    value_identifier(
        atomicPhysics::LevelVector<picongpu::atomicPhysics::numLevels>,
        levelVector_Argon, // name used in species Definition
        atomicPhysics::LevelVector<picongpu::atomicPhysics::numLevels>::create(0.)
        // initialization with zero
    );

    /** atomicConfigNumber
     *
     * atomic state of ions, description by index number, corresponding to a super
     *  configurations.
     *
     * Must be defined for each ion species seperatly by giving the number of modelled
     * atomic levels N, the proton number Z and the datatype to be used,
     * eg. float_x, uint32_t, ..., for storage of index.
     *
     * -> more efficient representation of atomicLevels
     *
     * BEWARE: index variable must cover the number of states possible,
     * See particles/atomicPhysics/stateRepresentation/ConfigNumber.hpp for further
     * information
     */

    /* definition of a configNumber type as an example,
     * other ion speceis can be added similarly as a new value identifier
     *
     * actual datatype must be defined seperately from value_identifier,
     * since all "," are interpreted as seperating macro arguments
     */
    using ConfigNumber_Ar = particles::atomicPhysics::stateRepresentation::ConfigNumber<
        picongpu::atomicPhysics::configNumberDataType,
        picongpu::atomicPhysics::numLevels,
        picongpu::atomicPhysics::protonNumber>;
    value_identifier(ConfigNumber_Ar, configNumber_Argon, ConfigNumber_Ar(1u));


} // namespace picongpu
