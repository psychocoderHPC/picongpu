/* Copyright 2013-2020 Axel Huebl, Rene Widera, Benjamin Worpitz, Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once

namespace picongpu
{
    namespace SI
    {
        /** This setup is based on section 7.11.1 of
         *  A. Taflove, S.C. Hagness. Computational Electrodynamics
         *  The Finite-Difference Time-Domain Method. 3rd Edition.
         *  The difference is we consider both 2D and 3D cases,
         *  and grid size is increased due to our absorber being part of
         *  the simulation area, not located outside of it as in the book.
         */

        constexpr float_64 CELL_SIZE_SI = 1.0e-3; // 1 mm

        /** equals X
         *  unit: meter */
        constexpr float_64 CELL_WIDTH_SI = CELL_SIZE_SI;
        /** equals Y
         *  unit: meter */
        constexpr float_64 CELL_HEIGHT_SI = CELL_WIDTH_SI;
        /** equals Z
         *  unit: meter */
        constexpr float_64 CELL_DEPTH_SI = CELL_WIDTH_SI;

        /** Duration of one timestep is just below the CFL limit
         *  unit: seconds */
        constexpr float_64 CFL_RATIO = 0.999;
        constexpr float_64 SQRT_3 = 1.73205080757;
        constexpr float_64 DELTA_T_SI = CFL_RATIO * CELL_SIZE_SI / (SPEED_OF_LIGHT_SI * SQRT_3);

        /** Note on units in reduced dimensions
         *
         * In 2D3V simulations, the CELL_DEPTH_SI (Z) cell length
         * is still used for normalization of densities, etc.
         *
         * A 2D3V simulation in a cartesian PIC simulation such as
         * ours only changes the degrees of freedom in motion for
         * (macro) particles and all (field) information in z
         * travels instantaneous, making the 2D3V simulation
         * behave like the interaction of infinite "wire particles"
         * in fields with perfect symmetry in Z.
         */

    } // namespace SI

    //! Define the size of the absorbing zone (in cells) for both exponential
    //! absorber and PML, a compile-time parameter
#ifndef PARAM_ABSORBER_SIZE
#    define PARAM_ABSORBER_SIZE 8
#endif
    constexpr uint32_t ABSORBER_SIZE = PARAM_ABSORBER_SIZE;
    constexpr uint32_t ABSORBER_CELLS[3][2] = {
        {ABSORBER_SIZE, ABSORBER_SIZE}, /*x direction [negative,positive]*/
        {ABSORBER_SIZE, ABSORBER_SIZE}, /*y direction [negative,positive]*/
        {ABSORBER_SIZE, ABSORBER_SIZE} /*z direction [negative,positive]*/
    }; // unit: number of cells

    //! Define the strength of the exponential absorber only
    constexpr float_X ABSORBER_STRENGTH_VALUE = 1.0e-3;
    constexpr float_X ABSORBER_STRENGTH[3][2] = {
        {ABSORBER_STRENGTH_VALUE, ABSORBER_STRENGTH_VALUE}, /*x direction [negative,positive]*/
        {ABSORBER_STRENGTH_VALUE, ABSORBER_STRENGTH_VALUE}, /*y direction [negative,positive]*/
        {ABSORBER_STRENGTH_VALUE, ABSORBER_STRENGTH_VALUE} /*z direction [negative,positive]*/
    }; // unit: none

    /** When to move the co-moving window.
     *  An initial pseudo particle, flying with the speed of light,
     *  is fired at the begin of the simulation.
     *  When it reaches movePoint % of the absolute(*) simulation area,
     *  the co-moving window starts to move with the speed of light.
     *
     *  (*) Note: beware, that there is one "hidden" row of gpus at the y-front,
     *            when you use the co-moving window
     *  0.75 means only 75% of simulation area is used for real simulation
     *
     * Warning: this variable is deprecated, but currently still required for
     * building purposes. Please keep the variable here. In case a moving window
     * is enabled in your .cfg file, please set the move point using the
     * 'windowMovePoint' parameter in that file, its default value is movePoint.
     */
    constexpr float_64 movePoint = 0.90;

} // namespace picongpu
