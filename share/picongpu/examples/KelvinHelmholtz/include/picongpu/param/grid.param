/* Copyright 2013-2020 Axel Huebl, Rene Widera, Richard Pausch,
 *                     Benjamin Worpitz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

namespace picongpu
{

    DEF_PARAMETER(float_64, DELTA_T, "delta_t", "simulation time step");
    PARAM_ADD(float_X, DELTA_T, PIC);


    DEF_PARAMETER(float_64, CELL_WIDTH, "delta_x", "cell size in x");
    PARAM_ADD(float_X, CELL_WIDTH, PIC);

    DEF_PARAMETER(float_64, CELL_HEIGHT, "delta_y", "cell size in y");
    PARAM_ADD(float_X, CELL_HEIGHT, PIC);

    DEF_PARAMETER(float_64, CELL_DEPTH, "delta_z", "cell size in z");
    PARAM_ADD(float_X, CELL_DEPTH, PIC);


    //CREATE_VAR(float_64 DELTA_T_SI);
    /** equals X
     *  unit: meter */
    PARAM_DEFAULT(DELTA_T, 1.79e-16);

    /** equals X
      *  unit: meter */
    PARAM_DEFAULT(CELL_WIDTH, 1.79e-16);
    /** equals Y
     *  unit: meter */
    PARAM_DEFAULT(CELL_HEIGHT, CELL_WIDTH(units::SI));
    /** equals Z
     *  unit: meter */
    PARAM_DEFAULT(CELL_DEPTH, CELL_WIDTH(units::SI));

    /** Note on units in reduced dimensions
     *
     * In 2D3V simulations, the CELL_DEPTH_SI (Z) cell length
     * is still used for normalization of densities, etc.
     *
     * A 2D3V simulation in a cartesian PIC simulation such as
     * ours only changes the degrees of freedom in motion for
     * (macro) particles and all (field) information in z
     * travels instantaneous, making the 2D3V simulation
     * behave like the interaction of infinite "wire particles"
     * in fields with perfect symmetry in Z.
     */


    //! Defines the size of the absorbing zone (in cells)
    constexpr uint32_t ABSORBER_CELLS[3][2] = {
        {32, 32},  /*x direction [negative,positive]*/
        {32, 32},  /*y direction [negative,positive]*/
        {32, 32}   /*z direction [negative,positive]*/
    }; //unit: number of cells

    //! Define the strength of the absorber for any direction
    constexpr float_X ABSORBER_STRENGTH[3][2] = {
        {1.0e-3, 1.0e-3}, /*x direction [negative,positive]*/
        {1.0e-3, 1.0e-3}, /*y direction [negative,positive]*/
        {1.0e-3, 1.0e-3}  /*z direction [negative,positive]*/
    }; //unit: none

    /** When to move the co-moving window.
     *  An initial pseudo particle, flying with the speed of light,
     *  is fired at the begin of the simulation.
     *  When it reaches movePoint % of the absolute(*) simulation area,
     *  the co-moving window starts to move with the speed of light.
     *
     *  (*) Note: beware, that there is one "hidden" row of gpus at the y-front,
     *            when you use the co-moving window
     *  0.75 means only 75% of simulation area is used for real simulation
     *
     * Warning: this variable is deprecated, but currently still required for
     * building purposes. Please keep the variable here. In case a moving window
     * is enabled in your .cfg file, please set the move point using the
     * 'windowMovePoint' parameter in that file, its default value is movePoint.
     */
    constexpr float_64 movePoint = 0.90;

}
