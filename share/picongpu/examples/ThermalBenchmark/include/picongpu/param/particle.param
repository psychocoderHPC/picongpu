/* Copyright 2013-2018 Axel Huebl, Rene Widera, Benjamin Worpitz,
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/startPosition/functors.def"
#include "picongpu/particles/manipulators/manipulators.def"
#include "picongpu/particles/filter/filter.def"

#include <pmacc/nvidia/functors/Assign.hpp>

namespace picongpu
{
namespace particles
{
    namespace startPosition
    {
        struct QuietParam
        {
            /** Count of particles per cell per direction at initial state
             *  unit: none
             */
            using numParticlesPerDimension = typename mCT::shrinkTo<
                mCT::Int<
                    2,
                    2,
                    1
                >,
                simDim
            >::type;
        };
        using Quiet = QuietImpl< QuietParam >;

        struct RandomParameter
        {
            /** Count of particles per cell at initial state
             *
             *  unit: none */
            static constexpr uint32_t numParticlesPerCell = 16u;
        };
        /** definition of random particle start */
        using Random = RandomImpl< RandomParameter >;

    } // namespace startPosition

    /** a particle with a weighting below MIN_WEIGHTING will not
     *      be created / will be deleted
     *  unit: none
     */
    constexpr float_X MIN_WEIGHTING = 0.001;

    /** During unit normalization, we assume this is a typical
     *  number of particles per cell for normalization of weighted
     *  particle attributes.
     */
    constexpr uint32_t TYPICAL_PARTICLES_PER_CELL =
        startPosition::RandomParameter::numParticlesPerCell;
    //mCT::volume<
    //    startPosition::QuietParam::numParticlesPerDimension
    //>::type::value;

namespace manipulators
{
    struct TemperatureParam
    {
        /* Initial temperature
         *  unit: keV
         */
        static constexpr float_64 temperature = 51.;
    };
    using AddTemperature = unary::Temperature< TemperatureParam >;

} // namespace manipulators
} // namespace particles
} // namespace picongpu
