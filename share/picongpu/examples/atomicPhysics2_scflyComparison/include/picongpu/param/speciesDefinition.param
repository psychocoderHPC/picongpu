/* Copyright 2013-2022 Rene Widera, Benjamin Worpitz, Heiko Burau, Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Define particle species.
 *
 * This file collects all previous declarations of base (reference) quantities
 * and configured solvers for species and defines particle species. This
 * includes "attributes" (lvalues to store with each species) and "flags"
 * (rvalues & aliases for solvers to perform with the species for each timestep
 * and ratios to base quantities). With those information, a `Particles` class
 * is defined for each species and then collected in the list
 * `VectorAllSpecies`.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/particles/Particles.hpp"
#include "picongpu/particles/atomicPhysics2/Number.hpp"

#include <pmacc/identifier/value_identifier.hpp>
#include <pmacc/meta/String.hpp>
#include <pmacc/meta/conversion/MakeSeq.hpp>
#include <pmacc/particles/Identifier.hpp>
#include <pmacc/particles/traits/FilterByFlag.hpp>

#include <cstdint>

// argon + thermal electrons
namespace picongpu
{
    /*########################### define default attributes ######################*/

    /** describe default attributes of a particle*/
    using DefaultParticleAttributes = MakeSeq_t<position<position_pic>, momentum, weighting, particleId>;

    /*############################ end default attributes ########################*/

    /*########################### define species #################################*/

    /*--------------------------- electrons --------------------------------------*/
    /* thermal bulk electrons: */
    /* ratio relative to BASE_CHARGE and BASE_MASS */
    value_identifier_constexpr(float_X, MassRatioElectrons, 1.0);
    value_identifier(float_X, ChargeRatioElectrons, 1.0);

    /* ratio relative to BASE_DENSITY
     * thermal "bulk": 2x ionized n_Ar
     */
    value_identifier(float_X, DensityRatioBulkElectrons, 2._X);

    using ParticleFlagsElectrons = MakeSeq_t<
        particlePusher<UsedParticlePusher>,
        shape<UsedParticleShape>,
        interpolation<UsedField2Particle>,
        current<UsedParticleCurrentSolver>,
        massRatio<MassRatioElectrons>,
        chargeRatio<ChargeRatioElectrons>,
        densityRatio<DensityRatioBulkElectrons>,
        isAtomicPhysicsElectron<>>;

    /* thermal bulk electrons */
    using BulkElectrons = Particles<
        PMACC_CSTRING("eth"),
        ParticleFlagsElectrons,
        DefaultParticleAttributes>;

    /*--------------------------- ions Argon ------------------------------------*/

    /* ratio relative to BASE_CHARGE and BASE_MASS */
    value_identifier_constexpr(float_X, MassRatioArgon, 40 * 1836.152672);
    value_identifier(float_X, ChargeRatioArgon, -18.0);

    /* ratio relative to BASE_DENSITY */
    value_identifier(float_X, DensityRatioArgon, 1.0_X);

#ifndef PARAM_IONIZATIONCURRENT
#    define PARAM_IONIZATIONCURRENT None
#endif

    using ParticleFlagsArgon = MakeSeq_t<
        particlePusher<UsedParticlePusher>,
        shape<UsedParticleShape>,
        interpolation<UsedField2Particle>,
        current<UsedParticleCurrentSolver>,
        massRatio<MassRatioArgon>,
        chargeRatio<ChargeRatioArgon>,
        densityRatio<DensityRatioArgon>,

        // core flag for loading atomic input data, no atomicPhysics outside ionizers if not set
        atomicDataType<atomicPhysics2::AtomicData_Ar>, // data type used for atomic data storage

        /// currently all are required, @todo change?, Brian Marre
        chargeStatesFileName<PMACC_CSTRING("ChargeStates_Ar.txt")>, // path to input file from call location
        atomicStatesFileName<PMACC_CSTRING("AtomicStates_Ar.txt")>, // path to input file from call location
        /// @todo replace with runtime hostDeviceBuffer of DataBoxes, Brian Marre, 2022
        numberAtomicStates<particles::atomicPhysics2::Number<470u>>, // number of atomic states in input file
        boundBoundTransitionsFileName<PMACC_CSTRING("BoundBoundTransitions_Ar.txt")>, // path to input file from call location
        boundFreeTransitionsFileName< PMACC_CSTRING("BoundFreeTransitions_Ar.txt" )>, // path to input file from call location
        autonomousTransitionsFileName<PMACC_CSTRING("AutonomousTransitions_Ar.txt")>, // path to input file from call location

        atomicNumbers<ionization::atomicNumbers::Argon_t>,
        ionizationElectronSpecies<BulkElectrons>, // which species to spawn as electrons upon ionization
        isAtomicPhysicsIon<>>;
        //! @attention only channels present in data and active in solver are actually possible

    using ArgonAttributes = MakeSeq_t<
        DefaultParticleAttributes,

        // atomic physics attributes
        //      storage of atomic state, defined separately in atomicPhysics.param
        atomicConfigNumber<picongpu::atomicPhysics2::ConfigNumber_Ar>,
        //      solver support
        processClass,
        transitionIndex,
        binIndex,
        accepted,

        // legacy ionization support
        /// @todo remove?, Brian Marre, 2022
        boundElectrons>;

    /* define species ions */
    using ArgonIons = Particles<PMACC_CSTRING("Ar"), ParticleFlagsArgon, ArgonAttributes>;

    /*########################### end species ####################################*/

    /** All known particle species of the simulation
     *
     * List all defined particle species from above in this list
     * to make them available to the PIC algorithm.
     */
    using VectorAllSpecies = MakeSeq_t<BulkElectrons, ArgonIons>;

} // namespace picongpu
