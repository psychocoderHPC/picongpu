/* Copyright 2013-2022 Axel Huebl, Heiko Burau, Rene Widera, Felix Schmitt,
 *                     Richard Pausch, Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Configure existing or define new normalized density profiles here.
 * During particle species creation in `speciesInitialization.param`,
 * those profiles can be translated to spatial particle distributions.
 *
 * This profile is normalized to units of `picongpu::SI::BASE_DENSITY_SI`, also defined in this file.
 * Note that it only operates with physical density, and does not concern macroparticles.
 * The number and sampling of macroparticles per cell are defined independently of a density profile.
 * Please refer to documentation of `picongpu::particles::CreateDensity<>` for further details on this interaction.
 *
 * Available profiles:
 *  - HomogenousImpl          : homogeneous density in whole simulation volume
 *  - GaussianImpl<>          : Gaussian profile in 'y', optionally with preceeding vacuum
 *  - GaussianCloudImpl<>     : Gaussian profile in all axes, optionally with preceeding vacuum in 'y'
 *  - LinearExponentialImpl<> : linear ramping of density in 'y' into exponential slope after
 *  - SphereFlanksImpl<>      : composition of 1D profiles, each in form of
 *                              exponential increasing flank, constant sphere, exponential decreasing flank
 *  - EveryNthCellImpl<>      : checkerboard profile matching the grid, particles are only present in cells
 *                              with the given stride from one another in all directions
 *  - FreeFormulaImpl<>       : apply user-defined functor for calculating density,
 *                              refer to `picongpu::densityProfiles::IProfile` for interface requirements
 *  - FromOpenPMDImpl<>       : load density values from a given file, requires openPMD API dependency
 *
 * In the end, this file typically defines an alias for each density profile to be used.
 * These aliases do not have to follow any naming convention, but serve as template parameters for
 * invocations of `picongpu::particles::CreateDensity<>` in `speciesInitialization.param`.
 */

#pragma once

#include "picongpu/particles/densityProfiles/profiles.def"
/* preprocessor struct generator */
#include <pmacc/preprocessor/struct.hpp>


namespace picongpu
{
    namespace SI
    {
        /** Base density in particles per m^3 in the density profiles.
         *
         * This is often taken as reference maximum density in normalized profiles.
         * Individual particle species can define a `densityRatio` flag relative
         * to this value.
         *
         * unit: ELEMENTS/m^3
         */
        constexpr float_64 BASE_DENSITY_SI = 1.0;
    } // namespace SI

    namespace densityProfiles
    {
        /** Profile Formula:
         *   `const float_X exponent = abs((y - gasCenter_SI) / gasSigma_SI);`
         *   `const float_X density = exp(gasFactor * pow(exponent, gasPower));`
         *
         *   takes `gasCenterLeft_SI      for y < gasCenterLeft_SI`,
         *         `gasCenterRight_SI     for y > gasCenterRight_SI`,
         *   and `exponent = 0.0 for gasCenterLeft_SI < y < gasCenterRight_SI`
         */
        PMACC_STRUCT(
            GaussianParam,
            /** ...
             */
            (PMACC_C_VALUE(float_X, gasFactor, -1.0))(PMACC_C_VALUE(float_X, gasPower, 4.0))

            /** height of vacuum area on top border
             *
             *  this vacuum is important because of the laser initialization,
             *  which is done in the first cells of the simulation and
             *  assumes a charge-free volume
             *  unit: cells
             */
            (PMACC_C_VALUE(uint32_t, vacuumCellsY, 50))

            /** The central position of the distribution
             *  unit: meter
             */
            (PMACC_C_VALUE(float_64, gasCenterLeft_SI, 4.62e-5))(PMACC_C_VALUE(float_64, gasCenterRight_SI, 4.62e-5))

            /** the distance from gasCenter_SI until the gas density decreases to its 1/e-th part
             *  unit: meter
             */
            (PMACC_C_VALUE(float_64, gasSigmaLeft_SI, 4.62e-5))(
                PMACC_C_VALUE(float_64, gasSigmaRight_SI, 4.62e-5))); /* struct GaussianParam */

        /* definition of density profile with gaussian profile */
        using Gaussian = GaussianImpl<GaussianParam>;


        /* definition of homogenous profile */
        using Homogenous = HomogenousImpl;


        /** parameter for `LinearExponential` profile
         *
         * @verbatim
         * Density Profile: /\
         *                 /  -,_
         *   linear       /      -,_    exponential
         *   slope       /  |       -,_ slope
         *                  MAX
         * @endverbatim
         */
        PMACC_STRUCT(
            LinearExponentialParam,
            /** height of vacuum area on top border
             *
             * this vacuum is important because of the laser initialization,
             * which is done in the first cells of the simulation and
             * assumes a charge-free volume
             * unit: cells
             */
            (PMACC_C_VALUE(uint32_t, vacuumCellsY, 50))

            /** Y-Position where the linear slope ends and the exponential slope
             *  begins
             *  unit: meter
             */
            (PMACC_C_VALUE(float_64, gasYMax_SI, 1.0e-3))

            /** Parameters for the linear slope:
             *  For Y <= gasYMax_SI:
             *    \rho / BASE_DENSITY = A * Y + B
             *                        = element [0.0; 1.0]
             *  unit for A: 1/m
             *  unit for B: none
             */
            (PMACC_C_VALUE(float_64, gasA_SI, 1.0e-3))

            /** Parameters for the exponential slope
             *  For Y > gasYMax_SI:
             *    let Y' = Y - gasYMax_SI
             *    \rho = exp[ - Y' * D ]
             *         = element [0.0; 1.0]
             *  unit: 1/m
             */
            (PMACC_C_VALUE(float_64, gasD_SI, 1.0e-3))

                (PMACC_C_VALUE(float_64, gasB, 0.0))); /* struct LinearExponentialParam */

        /* definition of gas with linear start slop and exponential end slope */
        using LinearExponential = LinearExponentialImpl<LinearExponentialParam>;


        PMACC_STRUCT(
            GaussianCloudParam,
            /** Profile Formula:
             *     exponent = |globalCellPos - center| / sigma
             *     density = e^[ gasFactor * exponent^gasPower ]
             */
            (PMACC_C_VALUE(float_X, gasFactor, -0.5))(PMACC_C_VALUE(float_X, gasPower, 2.0))

            /** height of vacuum area on top border
             *
             * this vacuum is important because of the laser initialization,
             * which is done in the first cells of the simulation and
             * assumes a charge-free volume
             * unit: cells
             */
            (PMACC_C_VALUE(uint32_t, vacuumCellsY, 50))

            /** The central position of the gas distribution
             *  unit: meter
             */
            (PMACC_C_VECTOR_DIM(float_64, simDim, center_SI, 1.134e-5, 1.134e-5, 1.134e-5))

            /** the distance from gasCenter_SI until the gas density decreases to its 1/e-th part
             *  unit: meter */
            (PMACC_C_VECTOR_DIM(float_64, simDim, sigma_SI, 7.0e-6, 7.0e-6, 7.0e-6))); /* struct GaussianCloudParam */

        /* definition of cloud profile */
        using GaussianCloud = GaussianCloudImpl<GaussianCloudParam>;


        /** The profile consists out of the composition of 3 1D profiles
         *  with the scheme: exponential increasing flank, constant sphere,
         *                   exponential decreasing flank
         * @verbatim
         *           ___
         *  1D:  _,./   \.,_   rho(r)
         *
         *  2D:  ..,x,..   density: . low
         *       .,xxx,.            , middle
         *       ..,x,..            x high (constant)
         * @endverbatim
         */
        PMACC_STRUCT(
            SphereFlanksParam,
            /** height of vacuum area on top border
             *
             * this vacuum is important because of the laser initialization,
             * which is done in the first cells of the simulation and
             * assumes a charge-free volume
             * unit: cells
             */
            (PMACC_C_VALUE(uint32_t, vacuumCellsY, 50))

            /** Radius of the constant sphere
             *  unit: meter
             */
            (PMACC_C_VALUE(float_64, r_SI, 1.0e-3))

            /** Inner radius if you want to build a shell/ring
             *  unit: meter
             */
            (PMACC_C_VALUE(float_64, ri_SI, 0.0))

            /** Middle of the constant sphere
             *  unit: meter
             */
            (PMACC_C_VECTOR_DIM(float_64, simDim, center_SI, 8.0e-3, 8.0e-3, 8.0e-3))

            /** Parameters for the exponential slope
             *  For distance > r_SI:
             *    let distance' = distance - r
             *    \rho = exp[ - distance' * exponent ]
             *  unit: 1/m
             */
            (PMACC_C_VALUE(float_64, exponent_SI, 1.0e3))

        ); /* struct SphereFlanksParam */

        /* definition of sphere profile with flanks */
        using SphereFlanks = SphereFlanksImpl<SphereFlanksParam>;

        /* definition of checkerboard density profile with particles every fourth cell in all directions */
        using EveryFourthCell = EveryNthCellImpl<mCT::UInt32<4, 4, 4>>;

        /** Density values taken from an openPMD file
         *
         * The density values must be a scalar dataset of type float_X, type mismatch would cause errors.
         * This implementation would ignore all openPMD metadata but axisLabels.
         * Each value in the dataset defines density in the cell with the corresponding total coordinate minus the
         * given offset. When the functor is instantiated, it will load the part matching the current domain position.
         * Density in points not present in the file would be set to the given default density.
         * Dimensionality of the file indexing must match the simulation dimensionality.
         * Density values are in BASE_DENSITY_SI units.
         */
        PMACC_STRUCT(
            FromOpenPMDParam,
            /** Path to the openPMD input file
             *
             * This value can alternatively be controlled at runtime by setting it to "" here and providing
             * command-line option <species>_runtimeDensityFile. Refer to description of this command-line option for
             * details. Note that runtime option only exists for this parameter, and not others in this struct.
             *
             * File-based iteration format is also supported, with the usual openPMD API naming scheme.
             *
             * It is recommended to use a full path to make it independent of how PIConGPU is launched.
             * Relative paths require consistency to the current directory when PIConGPU is started.
             * With tbg and the standard .tpl files, relative to the resulting simOutput directory.
             */
            (PMACC_C_STRING(filename, "density.h5"))

            /** Name of the openPMD dataset inside the file
             *
             * By default, this dataset indexing is assumed to be in (x, y, z) coordinates.
             * This can be changed by setting openPMD attribute "axisLabels" of the correponding dataset.
             * For example, PIConGPU output uses z-y-x via this attribute, and that automatically works.
             * Note that only C dataOrder is supported.
             *
             * @warning it is only the dataset itself, a simple text name and not something like
             * "/[directories]/density/[iteration]/fields/e_density".
             */
            (PMACC_C_STRING(datasetName, "e_density"))

            //! Iteration inside the file (only file, not related to the current simulation time iteration)
            (PMACC_C_VALUE(uint32_t, iteration, 0))

            /** Offset in the file in cells: each value is density at (total cell index - offset)
             *
             * This offset is in (x, y, z) coordinates.
             * Positive offset means the file values "start" from index == offset in the total coordinates.
             * Negative offset is also supported.
             */
            (PMACC_C_VECTOR_DIM(int, simDim, offset, 0, 0, 0))

            //! Default value to be used for cells with no corresponding file value
            (PMACC_C_VALUE(float_X, defaultDensity, 0.0_X))); /* struct FromOpenPMDParam */

#if(ENABLE_OPENPMD == 1)
        //! Definition of density-from-file profile
        using FromOpenPMD = FromOpenPMDImpl<FromOpenPMDParam>;
#endif


        struct FreeFormulaFunctor
        {
            /** This formula uses SI quantities only.
             *  The profile will be multiplied by BASE_DENSITY_SI.
             *
             * @param position_SI total offset including all slides [meter]
             * @param cellSize_SI cell sizes [meter]
             *
             * @return float_X density [normalized to 1.0]
             */
            HDINLINE float_X operator()(const floatD_64& position_SI, const float3_64& cellSize_SI)
            {
                return 0.0;
            }
        };

        /* definition of free formula profile */
        using FreeFormula = FreeFormulaImpl<FreeFormulaFunctor>;
    } // namespace densityProfiles
} // namespace picongpu
