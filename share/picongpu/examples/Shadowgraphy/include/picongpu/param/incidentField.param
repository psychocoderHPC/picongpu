/* Copyright 2020-2022 Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file incidentField.param
 *
 * Configure incident field profile and offset of the Huygens surface for each boundary.
 *
 * Available profiles:
 *  - profiles::ExpRampWithPrepulse<> : exponential ramp with prepulse wavepacket with given parameters
 *  - profiles::Free<>                : custom profile with user-provided functors to calculate incident E and B
 *  - profiles::GaussianBeam<>        : Gaussian beam with given parameters
 *  - profiles::None                  : no incident field
 *  - profiles::PlaneWave<>           : plane wave profile with given parameters
 *  - profiles::Polynom<>             : wavepacket with a polynomial temporal intensity shape profile with given
 * parameters
 *  - profiles::PulseFrontTilt<>      : Gaussian beam with tilted pulse front with given parameters
 *  - profiles::Wavepacket<>          : wavepacket with Gaussian spatial and temporal envelope profile with given
 * parameters
 *
 * All profiles but `Free<>` and `None` are parametrized with a profile-specific structure.
 * Their interfaces are defined in the corresponding `.def` files inside directory
 * picongpu/fields/incidentField/profiles/. Note that all these parameter structures inherit common base structures
 * from `BaseParam.def`. Thus, a user-provided structure must also define all members according to the base struct.
 *
 * In the end, this file needs to define `XMin`, `XMax`, `YMax`, `YMax`, `ZMin`, `ZMax` (the latter two can be skipped
 * in 2d) type aliases in namespace `picongpu::fields::incidentField`. Each of them could be a single profile or a
 * typelist of profiles created with `MakeSeq_t`. In case a typelist is used, the resulting field is a sum of
 * effects of all profiles in the list. This file also has to define constexpr array `POSITION` that controls
 * positioning of the generating surface relative to total domain. For example:
 *
 * @code{.cpp}
 * using XMin = profiles::Free<UserFunctorIncidentE, UserFunctorIncidentB>;
 * using XMax = profiles::None;
 * using YMin = MakeSeq_t<profiles::PlaneWave<UserPlaneWaveParams>, profiles::Wavepacket<UserWavepacketParams>>;
 * using YMax = profiles::None;
 * using ZMin = profiles::Polynom<UserPolynomParams>;
 * using ZMax = profiles::GaussianBeam<UserGaussianBeamParams>;
 *
 * constexpr int32_t POSITION[3][2] = { {16, -16}, {16, -16}, {16, -16} };
 * @endcode
 */

#pragma once

#include "picongpu/fields/incidentField/profiles/profiles.def"


namespace picongpu
{
    namespace fields
    {
        namespace incidentField
        {
            /** Base class with laser parameters and common functionality
             *
             * It is not required to have a base class, but in this case convenient to keep all laser-related things
             * together.
             */

            namespace profiles
            {
                struct MyGaussianParam
                {
                    static constexpr float_64 WAVE_LENGTH_SI = 800e-9; // TIME_PERIOD_SI * SI::SPEED_OF_LIGHT_SI;
                    static constexpr float_64 TIME_PERIOD_SI = WAVE_LENGTH_SI / SI::SPEED_OF_LIGHT_SI;
                    static constexpr float_64 UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI
                        * SI::ELECTRON_MASS_SI * SI::SPEED_OF_LIGHT_SI * SI::SPEED_OF_LIGHT_SI
                        / SI::ELECTRON_CHARGE_SI;
                    static constexpr float_64 A0 = 8.0;
                    static constexpr float_64 AMPLITUDE_SI = A0 * UNITCONV_A0_to_Amplitude_SI;

                    static constexpr float_64 PULSE_LENGTH_SI = 20e-15; // 0.026 ns

                    static constexpr float_X LASER_PHASE = 0.0_X;

                    static constexpr float_64 DIRECTION_X = 0.0;
                    static constexpr float_64 DIRECTION_Y = 0.0;
                    static constexpr float_64 DIRECTION_Z = 1.0;

                    static constexpr float_64 FOCUS_POSITION_X_SI = 32.0e-6;
                    static constexpr float_64 FOCUS_POSITION_Y_SI = 64.0e-6;
                    static constexpr float_64 FOCUS_POSITION_Z_SI = 20.0e-6;

                    static constexpr PolarisationType Polarisation = PolarisationType::Linear;

                    static constexpr float_64 POLARISATION_DIRECTION_X = 0.0;
                    static constexpr float_64 POLARISATION_DIRECTION_Y = 1.0;
                    static constexpr float_64 POLARISATION_DIRECTION_Z = 0.0;

                    static constexpr float_64 W0_SI = 5e-6;

                    static constexpr float_64 PULSE_INIT = 16.0;

                    using LAGUERREMODES_t = defaults::gaussianBeam::LAGUERREMODES_t;
                    using LAGUERREPHASES_t = defaults::gaussianBeam::LAGUERREPHASES_t;
                    static constexpr uint32_t MODENUMBER = defaults::gaussianBeam::MODENUMBER;
                    /** @} */
                };
            } // namespace profiles

            //! Source of incident E and B fields
            // using MyXMinProfile = profiles::Free<FunctorXMinIncidentE, FunctorXMinIncidentB>;
            using MyXMinProfile = profiles::GaussianBeam<profiles::MyGaussianParam>;

            /**@{*/
            /** Incident field profile types along each boundary, these 6 types (or aliases) are required.
             *
             * Here we generate Gaussian pulses (focused at generation position) propagating inwards from X min and Y
             * Max borders.
             */
            using XMin = MyXMinProfile; // MyXMinProfile;
            using XMax = MyXMinProfile;
            using YMin = MyXMinProfile;
            using YMax = MyXMinProfile; // MakeSeq_t<MyYMaxProfile, MyYMaxProfileDelay>;
            using ZMin = MyXMinProfile;
            using ZMax = MyXMinProfile;
            /**@}*/

            /** Position in cells of the Huygens surface relative to start of the total domain
             *
             * The position is set as an offset, in cells, counted from the start of the total domain.
             * For the max boundaries, negative position values are allowed.
             * These negative values are treated as position at (global_domain_size[d] + POSITION[d][1]).
             * It is also possible to specify the position explicitly as a positive number.
             * Then it is on a user to make sure the position is correctly calculated wrt the grid size.
             *
             * Except moving window simulations, the position must be inside the global domain.
             * The distance between the Huygens surface and each global domain boundary must be at least
             * absorber_thickness + (FDTD_spatial_order / 2 - 1). However beware of setting position = direction *
             * (absorber_thickness + const), as then changing absorber parameters will affect laser positioning. When
             * all used profiles are None, the check for POSITION validity is skipped.
             *
             * For moving window simulations, POSITION for the YMax side can be located outside the initially simulated
             * volume. In this case, parts of the generation surface outside of the currently simulated volume is are
             * treated as if they had zero incident field and it is user's responsibility to apply a source matching
             * such a case.
             */
            constexpr int32_t POSITION[3][2] = {
                {16, -16}, // x direction [negative, positive]
                {16, -16}, // y direction [negative, positive]
                {16, -16} // z direction [negative, positive]
            };

        } // namespace incidentField
    } // namespace fields
} // namespace picongpu
