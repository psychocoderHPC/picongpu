/* Copyright 2014-2021 Axel Huebl, Alexander Debus, Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file fieldBackground.param
 *
 * Load external background fields
 */

#pragma once

/** Load pre-defined templates */
#include "picongpu/fields/background/templates/twtsfast/twtsfast.hpp"

/** Load parameters of the TWTS background laser field */
#include "TwtsBackgroundLaser.param"

#ifndef PARAM_INCLUDE_FIELDBACKGROUND
#define PARAM_INCLUDE_FIELDBACKGROUND true
#endif


namespace picongpu
{
    class FieldBackgroundE
    {
    public:
      /* Add this additional field for pushing particles */
      static constexpr bool InfluenceParticlePusher = PARAM_INCLUDE_FIELDBACKGROUND;

      /* We use this to calculate your SI input back to our unit system */
      PMACC_ALIGN(m_unitField, const float3_64);

      /* TWTS E-fields need to be initialized on host,
       *  so they can look up global grid dimensions. */
      templates::twtsfast::EField const twtsFieldE1;
      templates::twtsfast::EField const twtsFieldE2;
      templates::twtsfast::EField const twtsFieldE3;
      templates::twtsfast::EField const twtsFieldE4;

      using Params = ::picongpu::fields::background::TwtsParam;

      HDINLINE FieldBackgroundE(const float3_64 unitField) :
          m_unitField(unitField),
          twtsFieldE1(
              Params::FOCUS_Y_SI,
              Params::WAVE_LENGTH_SI,
              Params::PULSE_LENGTH_SI,
              Params::W0_SI,
              Params::PHI,
              Params::BETA_0,
              Params::TDELAY,
              Params::AUTO_TDELAY,
              templates::twtsfast::EField::LINEAR_X
          ),
          twtsFieldE2(
              Params::FOCUS_Y_SI,
              Params::WAVE_LENGTH_SI,
              Params::PULSE_LENGTH_SI,
              Params::W0_SI,
              -Params::PHI,
              Params::BETA_0,
              Params::TDELAY,
              Params::AUTO_TDELAY,
              templates::twtsfast::EField::LINEAR_X
          ),
          twtsFieldE3(
              Params::FOCUS_Y_SI,
              Params::WAVE_LENGTH_SI,
              Params::PULSE_LENGTH_SI,
              Params::W0_SI,
              Params::PHI,
              Params::BETA_0,
              Params::TDELAY,
              Params::AUTO_TDELAY,
              templates::twtsfast::EField::LINEAR_YZ
          ),
          twtsFieldE4(
              Params::FOCUS_Y_SI,
              Params::WAVE_LENGTH_SI,
              Params::PULSE_LENGTH_SI,
              Params::W0_SI,
              -Params::PHI,
              Params::BETA_0,
              Params::TDELAY,
              Params::AUTO_TDELAY,
              templates::twtsfast::EField::LINEAR_YZ
          )
      {
      }

      /** Specifying background field E(r,t)
       *
       * \param cellIdx The total cell id counted from the start at t = 0
       * \param currentStep The current time step */
      HDINLINE float3_X operator()(const DataSpace<simDim>& cellIdx, const uint32_t currentStep) const
      {
          /** unit: Volt /meter */
          float3_64 const invUnitField = float3_64(
              1.0 / m_unitField[0],
              1.0 / m_unitField[1],
              1.0 / m_unitField[2]
          );

          /* laser amplitude in picongpu units [ unit: (Volt /meter) / unitField-factor ]
           * Note: the laser amplitude is included in all field components
           * polarization and other properties are established by the peak amplitude
           * normalized twtsFieldE(...) */
          float3_X const amplitude = precisionCast<float_X>(
              Params::AMPLITUDE_SI * invUnitField
          );

          return (
              float3_X::create(Params::NORM_E_B_12) * amplitude * twtsFieldE1( cellIdx, currentStep )
              - float3_X::create(Params::NORM_E_B_12) * amplitude * twtsFieldE2( cellIdx, currentStep )
              + float3_X::create(Params::NORM_E_B_34) * amplitude * twtsFieldE3( cellIdx, currentStep )
              + float3_X::create(Params::NORM_E_B_34) * amplitude * twtsFieldE4( cellIdx, currentStep )
          );
      }
    };

    class FieldBackgroundB
    {
    public:
      /* Add this additional field for pushing particles */
      static constexpr bool InfluenceParticlePusher = PARAM_INCLUDE_FIELDBACKGROUND;

      /* We use this to calculate your SI input back to our unit system */
      PMACC_ALIGN(m_unitField, const float3_64);

      /* TWTS B-fields need to be initialized on host,
       *  so they can look up global grid dimensions. */
      templates::twtsfast::BField const twtsFieldB1;
      templates::twtsfast::BField const twtsFieldB2;
      templates::twtsfast::BField const twtsFieldB3;
      templates::twtsfast::BField const twtsFieldB4;

      using Params = ::picongpu::fields::background::TwtsParam;

      HDINLINE FieldBackgroundB(const float3_64 unitField) :
          m_unitField(unitField),
          twtsFieldB1(
              Params::FOCUS_Y_SI,
              Params::WAVE_LENGTH_SI,
              Params::PULSE_LENGTH_SI,
              Params::W0_SI,
              Params::PHI,
              Params::BETA_0,
              Params::TDELAY,
              Params::AUTO_TDELAY,
              templates::twtsfast::BField::LINEAR_X
          ),
          twtsFieldB2(
              Params::FOCUS_Y_SI,
              Params::WAVE_LENGTH_SI,
              Params::PULSE_LENGTH_SI,
              Params::W0_SI,
              -Params::PHI,
              Params::BETA_0,
              Params::TDELAY,
              Params::AUTO_TDELAY,
              templates::twtsfast::BField::LINEAR_X
          ),
          twtsFieldB3(
              Params::FOCUS_Y_SI,
              Params::WAVE_LENGTH_SI,
              Params::PULSE_LENGTH_SI,
              Params::W0_SI,
              Params::PHI,
              Params::BETA_0,
              Params::TDELAY,
              Params::AUTO_TDELAY,
              templates::twtsfast::BField::LINEAR_YZ
          ),
          twtsFieldB4(
              Params::FOCUS_Y_SI,
              Params::WAVE_LENGTH_SI,
              Params::PULSE_LENGTH_SI,
              Params::W0_SI,
              -Params::PHI,
              Params::BETA_0,
              Params::TDELAY,
              Params::AUTO_TDELAY,
              templates::twtsfast::BField::LINEAR_YZ
          )
      {
      }

      /** Specifying background field B(r,t)
       *
       * \param cellIdx The total cell id counted from the start at t=0
       * \param currentStep The current time step */
      HDINLINE float3_X operator()(const DataSpace<simDim>& cellIdx, const uint32_t currentStep) const
      {
        /** unit: Volt /meter */
        float3_64 const invUnitField = float3_64(
            1.0 / m_unitField[0],
            1.0 / m_unitField[1],
            1.0 / m_unitField[2]
        );

        /* laser amplitude in picongpu units [ unit: (Volt /meter) / unitField-factor ]
         * Note: the laser amplitude is included in all field components
         * polarization and other properties are established by the peak amplitude
         * normalized twtsFieldE(...) */
        float3_X const amplitude = precisionCast<float_X>(
            Params::AMPLITUDE_SI * invUnitField
        );

        return (
            float3_X::create(Params::NORM_E_B_12) * amplitude * twtsFieldB1( cellIdx, currentStep )
            - float3_X::create(Params::NORM_E_B_12) * amplitude * twtsFieldB2( cellIdx, currentStep )
            + float3_X::create(Params::NORM_E_B_34) * amplitude * twtsFieldB3( cellIdx, currentStep )
            + float3_X::create(Params::NORM_E_B_34) * amplitude * twtsFieldB4( cellIdx, currentStep )
        );
      }
    };

    class FieldBackgroundJ
    {
    public:
        /* Add this additional field? */
        static constexpr bool activated = false;

        /* We use this to calculate your SI input back to our unit system */
        PMACC_ALIGN(m_unitField, const float3_64);

        HDINLINE FieldBackgroundJ(const float3_64 unitField) : m_unitField(unitField)
        {
        }

        /** Specify your background field J(r,t) here
         *
         * @param cellIdx The total cell id counted from the start at t=0
         * @param currentStep The current time step */
        HDINLINE float3_X operator()(const DataSpace<simDim>& cellIdx, const uint32_t currentStep) const
        {
            /* example: periodicity of 20 microns ( = 2.0e-5 m) */
            constexpr float_64 period_SI(20.0e-6);
            /* calculate cells -> SI -> m to microns*/
            const float_64 y_SI = cellIdx.y() * SI::CELL_HEIGHT_SI * 1.0e6;
            /* note: you can also transform the time step to seconds by
             *       multiplying with DELTA_T_SI */

            /* specify your J-Field in A/m^2 and convert to PIConGPU units */
            const float_X sinArg = precisionCast<float_X>(y_SI / period_SI * 2.0 * PI);
            return float3_X(0.0, math::cos(sinArg) / m_unitField[1], 0.0);
        }
    };

} // namespace picongpu
