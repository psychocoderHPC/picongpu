/* Copyright 2013-2021 Axel Huebl, Rene Widera, Benjamin Worpitz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Definition of cell sizes and time step. Our cells are defining a regular,
 * cartesian grid. Our explicit FDTD field solvers require an upper bound for
 * the time step value in relation to the cell size for convergence. Make
 * sure to resolve important wavelengths of your simulation, e.g. shortest
 * plasma wavelength, Debye length and central laser wavelength both spatially
 * and temporarily.
 *
 * **Units in reduced dimensions**
 *
 * In 2D3V simulations, the CELL_DEPTH_SI (Z) cell length
 * is still used for normalization of densities, etc..
 *
 * A 2D3V simulation in a cartesian PIC simulation such as
 * ours only changes the degrees of freedom in motion for
 * (macro) particles and all (field) information in z
 * travels instantaneously, making the 2D3V simulation
 * behave like the interaction of infinite "wire particles"
 * in fields with perfect symmetry in Z.
 *
 */

#pragma once


namespace picongpu
{
    namespace SI
    {
      /** equals Y - the laser & moving window propagation direction
       *  unit: meter */
      constexpr float_64 CELL_HEIGHT_SI = 6.69213e-08;
      /** equals Z
       *  unit: meter */
      constexpr float_64 CELL_DEPTH_SI = 7.64914e-07;
      /** equals X
       *  unit: meter */
      constexpr float_64 CELL_WIDTH_SI = CELL_DEPTH_SI;

      /** Duration of one timestep
       *  unit: seconds */
      /** Courant-Friedrich-Levy condition
            c Dt < 1 / sqrt( 1/Dx^2 + 1/Dy^2 + 1/Dz^2 )
          For example, assuming cubic cells,
            Dt = 0.995 * Dy / sqrt(3.) / c
               = 0.995 * Dy / 1.7320508075688772 / c
       */
       /* Since we optimize dispersion over the simulation duration, we decrease the time step below the CFL limit */
      constexpr float_64 DELTA_T_SI = 7.71143e-17;

    } // namespace SI

    /** When to move the co-moving window.
     *  An initial pseudo particle, flying with the speed of light,
     *  is fired at the begin of the simulation.
     *  When it reaches movePoint % of the absolute(*) simulation area,
     *  the co-moving window starts to move with the speed of light.
     *
     *  (*) Note: beware, that there is one "hidden" row of gpus at the y-front,
     *            when you use the co-moving window
     *  0.75 means only 75% of simulation area is used for real simulation
     *
     * Warning: this variable is deprecated, but currently still required for
     * building purposes. Please keep the variable here. In case a moving window
     * is enabled in your .cfg file, please set the move point using the
     * 'windowMovePoint' parameter in that file, its default value is movePoint.
     */
    constexpr float_64 movePoint = 0.9;

} // namespace picongpu
