/* Copyright 2013-2021 Axel Huebl, Heiko Burau, Rene Widera, Felix Schmitt,
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Configure existing or define new normalized density profiles here.
 * During particle species creation in speciesInitialization.param,
 * those profiles can be translated to spatial particle distributions.
 */

#pragma once

#include "picongpu/particles/densityProfiles/profiles.def"
/* preprocessor struct generator */
#include <pmacc/preprocessor/struct.hpp>


namespace picongpu
{
    namespace SI
    {
        /** Base density in particles per m^3 in the density profiles.
         *
         * This is often taken as reference maximum density in normalized profiles.
         * Individual particle species can define a `densityRatio` flag relative
         * to this value.
         *
         * unit: ELEMENTS/m^3
         */
        constexpr float_64 BASE_DENSITY_SI = 2.5e24;
    } // namespace SI

    namespace densityProfiles
    {
        /* definition of homogenous profile */
        using Homogenous = HomogenousImpl;


        struct FreeFormulaFunctor
        {
            /** This formula uses SI quantities only.
             *  The profile will be multiplied by BASE_DENSITY_SI.
             *
             * @param position_SI total offset including all slides [meter]
             * @param cellSize_SI cell sizes [meter]
             *
             * @return float_X density [normalized to 1.0]
             */
            HDINLINE float_X operator()(const floatD_64& position_SI, const float3_64& cellSize_SI)
            {
#if 0
              const float_64 y = precisionCast<float_64>(position_SI.y());
            const float_64 z = precisionCast<float_64>(position_SI.z());

            /** height of vacuum area on bottom border
             *      this vacuum is really important because of the laser initialization,
             *      which is done in the first cell of the simulation
             *  unit: meter */
            constexpr double VACUUM_Y_SI = 100.0 * picongpu::SI::CELL_HEIGHT_SI;
            constexpr double VACUUM_Z_SI = 148.0 * picongpu::SI::CELL_DEPTH_SI;
            constexpr double VACUUM_Z_LENGTH_SI = (2.0 * 32.0 + 2424.0) * picongpu::SI::CELL_DEPTH_SI;
            constexpr double Z_GRADIENT_SI = 32.0 * picongpu::SI::CELL_DEPTH_SI;

            float_X temp = float_X(1.0);

            if (y < VACUUM_Y_SI)
                return float_X(0.0);
            if (z < VACUUM_Z_SI || z >= (VACUUM_Z_LENGTH_SI + VACUUM_Z_SI))
                temp = float_X(0.0);
            if (z >= VACUUM_Z_SI && z < (VACUUM_Z_SI + Z_GRADIENT_SI))
                temp = float_X( (z - VACUUM_Z_SI)/Z_GRADIENT_SI );
            if (z < (VACUUM_Z_LENGTH_SI + VACUUM_Z_SI) && z >= (VACUUM_Z_LENGTH_SI + VACUUM_Z_SI - Z_GRADIENT_SI))
                temp = float_X( (VACUUM_Z_LENGTH_SI + VACUUM_Z_SI - z)/Z_GRADIENT_SI );

            if (y >= (VACUUM_Y_SI) && y < (VACUUM_Y_SI+20.0e-6))
                return temp*float_X( (y-VACUUM_Y_SI)/20.0e-6 );
            if (y > (VACUUM_Y_SI+60.0e-6) && y < (VACUUM_Y_SI+160.0e-6))
                return temp*float_X( ( 1.0 - (y-VACUUM_Y_SI-60.0e-6)/100.0e-6 ) * 0.292893 + 0.707107 );

            if (y >= (VACUUM_Y_SI+160.0e-6) && y < (VACUUM_Y_SI+460.0e-6))
                return temp*float_X( ( 1.0 - (y-VACUUM_Y_SI-160.0e-6)/300.0e-6 ) * 0.207107 + 0.50 );
            if (y >= (VACUUM_Y_SI+460.0e-6))
                return temp*float_X(0.50); // 0.32+e19 cm^-3


            return float_X(temp);
#endif
            return 1._X;
            }
        };

        /* definition of free formula profile */
        using FreeFormula = FreeFormulaImpl<FreeFormulaFunctor>;
    } // namespace densityProfiles
} // namespace picongpu
