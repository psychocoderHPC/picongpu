# Copyright 2014-2021 Felix Schmitt, Axel Huebl, Richard Pausch, Heiko Burau,
#                     Franz Poeschel
#
# This file is part of PIConGPU.
#
# PIConGPU is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# PIConGPU is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with PIConGPU.
# If not, see <http://www.gnu.org/licenses/>.

################################################################################
## This file describes sections and variables for PIConGPU's
## TBG batch file generator.
## These variables basically wrap PIConGPU command line flags.
## To see all flags available for your PIConGPU binary, run
## picongpu --help. The avalable flags depend on your configuration flags.
##
## Flags that target a specific species e.g. electrons (--e_png) or ions
## (--i_png) must only be used if the respective species is activated (configure flags).
##
## If not stated otherwise, variables/flags must not be used more than once!
################################################################################

################################################################################
## Section: Required Variables
## Variables in this secton are necessary for PIConGPU to work properly and should not
## be removed. However, you are free to adjust them to your needs, e.g. setting
## the number of GPUs in each dimension.
################################################################################

# Batch system walltime
TBG_wallTime="1:30:00"

# Number of devices in each dimension (x,y,z) to use for the simulation
TBG_devices_x=1
TBG_devices_y=8
TBG_devices_z=2

# Size of the simulation grid in cells as "X Y Z"
# note: the number of cells needs to be an exact multiple of a supercell
#       and has to be at least 3 supercells per device,
#       the size of a supercell (in cells) is defined in `memory.param`
TBG_gridSize="224 2560 448"

# Number of simulation steps/iterations as "N"
TBG_steps="5000"

# disable grid size auto adjustment
TBG_disableGridAutoAdjustment="--autoAdjustGrid off"

################################################################################
## Section: Optional Variables
## You are free to add and remove variables here as you like.
## Please add all variables you define in this section to TBG_programParams.
################################################################################

# version information on startup
TBG_version="--versionOnce"


# Regex to describe the static distribution of the cells for each device
# default: equal distribution over all devices
# example for -d 2 4 1 -g 128 192 12
#TBG_gridDist="--gridDist '56' '336{2},448{12},112{2}' '56'"


# Specifies whether the grid is periodic (1) or not (0) in each dimension (X,Y,Z).
# Default: no periodic dimensions
#TBG_periodic="--periodic 1 0 1"
TBG_absorber="--fieldAbsorber pml"


# Defines when to start sliding the window for simulations with moving window.
# The window starts sliding at the time required to pass the distance of
# windowMovePoint * (global window size in y) when moving with the speed of light
TBG_windowMovePoint="--windowMovePoint 0.0"


# Enables moving window (sliding) in your simulation
TBG_movingWindow="-m !TBG_windowMovePoint"


# Duplicate E and B field storage inside field background to improve performance at cost of additional memory
TBG_fieldBackground="--fieldBackground.duplicateFields"

################################################################################
## Section: Multi Data Plugins
##
## Please add all variables you define in this section to TBG_plugins.
################################################################################

TBG_diagnostik_output=50
TBG_simulation_output=150

# Create 2D images in PNG format every .period steps.
# The slice plane is defined using .axis [yx,yz] and .slicePoint (offset from origin
# as a float within [0.0,1.0].
# The output folder can be set with .folder.
# Can be used more than once to print different images, e.g. for YZ and YX planes.
#TBG_e_pngYZ="--e_png.period 100 --e_png.axis yz --e_png.slicePoint 0.5 --e_png.folder pngElectronsYZ"
#TBG_e_pngYX="--e_png.period 100 --e_png.axis yx --e_png.slicePoint 0.5 --e_png.folder pngElectronsYX"

# Create a particle-energy histogram [in keV] per species for every .period steps
TBG_e_all_histogram="--e_energyHistogram.period !TBG_diagnostik_output \
                     --e_energyHistogram.binCount 1024     \
                     --e_energyHistogram.minEnergy 0 --e_energyHistogram.maxEnergy 100000 \
                     --e_energyHistogram.filter all"

TBG_e_forward_histogram="--e_energyHistogram.period !TBG_diagnostik_output \
                         --e_energyHistogram.binCount 4096     \
                         --e_energyHistogram.minEnergy 1000 --e_energyHistogram.maxEnergy 2500000 \
                         --e_energyHistogram.filter fwPinhole"


# Calculate a 2D phase space
# - momentum range in m_<species> c
# NOT PROPERLY SETUP YET! AND NOT USED!
TBG_e_PSxpx="--e_phaseSpace.period !TBG_diagnostik_output --e_phaseSpace.filter all --e_phaseSpace.space x --e_phaseSpace.momentum px --e_phaseSpace.min -1.0 --e_phaseSpace.max 1.0"
TBG_e_PSxpz="--e_phaseSpace.period !TBG_diagnostik_output --e_phaseSpace.filter all --e_phaseSpace.space x --e_phaseSpace.momentum pz --e_phaseSpace.min -1.0 --e_phaseSpace.max 1.0"
TBG_e_PSypx="--e_phaseSpace.period !TBG_diagnostik_output --e_phaseSpace.filter all --e_phaseSpace.space y --e_phaseSpace.momentum px --e_phaseSpace.min -1.0 --e_phaseSpace.max 1.0"
TBG_e_PSypz="--e_phaseSpace.period !TBG_diagnostik_output --e_phaseSpace.filter all --e_phaseSpace.space y --e_phaseSpace.momentum pz --e_phaseSpace.min -1.0 --e_phaseSpace.max 1.0"
TBG_e_PSypy="--e_phaseSpace.period !TBG_diagnostik_output --e_phaseSpace.filter all --e_phaseSpace.space y --e_phaseSpace.momentum py --e_phaseSpace.min -1.0 --e_phaseSpace.max 1.0"
TBG_e_PSxpy="--e_phaseSpace.period !TBG_diagnostik_output --e_phaseSpace.filter all --e_phaseSpace.space x --e_phaseSpace.momentum py --e_phaseSpace.min -1.0 --e_phaseSpace.max 1.0"
TBG_e_PSzpy="--e_phaseSpace.period !TBG_diagnostik_output --e_phaseSpace.filter all --e_phaseSpace.space z --e_phaseSpace.momentum py --e_phaseSpace.min -1.0 --e_phaseSpace.max 1.0"

TBG_e_phaseSpaces="!TBG_e_PSxpx !TBG_e_PSxpz !TBG_e_PSypx !TBG_e_PSypz !TBG_e_PSypy !TBG_e_PSxpy !TBG_e_PSzpy"


# Write out slices of field data for every .period step
TBG_EField_sliceXY="--E_slice.period !TBG_diagnostik_output --E_slice.fileName sliceExy --E_slice.plane 2 --E_slice.slicePoint 0.5"
TBG_BField_sliceXY="--B_slice.period 100 --B_slice.fileName sliceB --B_slice.plane 2 --B_slice.slicePoint 0.5"
TBG_JField_sliceXY="--J_slice.period 100 --J_slice.fileName sliceJ --J_slice.plane 2 --J_slice.slicePoint 0.5"

## CURRENTLY NOT USED IN TBG_plugins!
TBG_fieldSlice="!TBG_EField_sliceXY !TBG_BField_sliceXY !TBG_JField_sliceXY"


# Count the number of macro particles per species for every .period steps
TBG_macroCount="--e_macroParticlesCount.period !TBG_diagnostik_output"


# Sum up total energy every .period steps for
# - species   (--<species>_energy)
# - fields    (--fields_energy)
TBG_sumEnergy="--fields_energy.period !TBG_diagnostik_output --e_energy.period !TBG_diagnostik_output --e_energy.filter all"


# Dump simulation data (fields and particles) to ADIOS2 files via openPMD-api.
# Data is dumped every .period steps to the fileset .file.

# Further control over the backends used in the openPMD plugins is available
# through the mechanisms exposed by the openPMD API:
# * environment variables
# * JSON-formatted configuration string
# Further information on both is retrieved from the official documentation
# https://openpmd-api.readthedocs.io

TBG_ADIOS2_configuration="'{                             \
   \"adios2\": {                                         \
       \"dataset\": {                                    \
           \"operators\": [ {                            \
               \"type\": \"blosc\"                       \
               , \"parameters\": {                       \
                   \"clevel\": \"1\"                     \
                   , \"compressor\": \"zstd\"            \
                   , \"doshuffle\": \"BLOSC_BITSHUFFLE\" \
               }                                         \
           } ]                                           \
       }                                                 \
       , \"engine\": {                                   \
           \"type\": \"file\"                            \
           , \"parameters\": {                           \
               \"BufferGrowthFactor\": \"1.1\"           \
               , \"InitialBufferSize\": \"32GB\"         \
               , \"AggregatorRatio\" : \"1\"             \
           }                                             \
       }                                                 \
   }                                                     \
}'"


TBG_openPMD="--openPMD.period !TBG_simulation_output        \
             --openPMD.source 'species_all,fields_all'      \
             --openPMD.file simOutput                       \
             --openPMD.ext bp                               \
             --openPMD.infix '_%T'                          \
             --openPMD.dataPreparationStrategy mappedMemory \
             --openPMD.json !TBG_ADIOS2_configuration"


# Create a checkpoint that is restartable every --checkpoint.period steps
#   http://git.io/PToFYg
TBG_checkpoint="--checkpoint.period 10000           \
                --checkpoint.backend openPMD        \
                --checkpoint.openPMD.ext bp         \
                " # --checkpoint.openPMD.json !TBG_ADIOS2_configuration_FALLBACK"

# Restart the simulation from checkpoint created using TBG_checkpoint
#TBG_restart="--checkpoint.restart"
# By default, the last checkpoint is restarted if not specified via
#   --checkpoint.restart.step 1000
# To restart in a new run directory point to the old run where to start from
#   --checkpoint.restart.directory /path/to/simOutput/checkpoints

## CURRENTLY NOT USED IN TBG_plugins
# Resource log: log resource information to streams or files
# set the resources to log by --resourceLog.properties [rank, position, currentStep, particleCount, cellCount]
# set the output stream by --resourceLog.stream [stdout, stderr, file]
# set the prefix of filestream --resourceLog.prefix [prefix]
# set the output format by (pp == pretty print) --resourceLog.format jsonpp [json,jsonpp,xml,xmlpp]
# The example below logs all resources for each time step to stdout in the pretty print json format
TBG_resourceLog="--resourceLog.period 1 --resourceLog.stream stdout                         \
                 --resourceLog.properties rank position currentStep particleCount cellCount \
                 --resourceLog.format jsonpp"

##
## Collect all plugin configurations
##
#TBG_plugins="!TBG_e_all_histogram     \
#             !TBG_e_forward_histogram \
#             !TBG_e_phaseSpaces       \
#             !TBG_macroCount          \
#             !TBG_sumEnergy           \
#             !TBG_openPMD             \
#             !TBG_checkpoint"

TBG_plugins="!TBG_e_all_histogram     \
             !TBG_e_forward_histogram \
             !TBG_e_phaseSpaces       \
             !TBG_macroCount          \
             !TBG_sumEnergy           \
             !TBG_openPMD"


################################################################################
## Section: Program Parameters
## This section contains TBG internal variables, often composed from required
## variables. These should not be modified except when you know what you are doing!
################################################################################

# Number of compute devices in each dimension as "X Y Z"
TBG_deviceDist="!TBG_devices_x !TBG_devices_y !TBG_devices_z"


# Combines all declared variables. These are passed to PIConGPU as command line flags.
# The program output (stdout) is stored in a file called output.stdout.
TBG_programParams="-d !TBG_deviceDist               \
                   -g !TBG_gridSize                 \
                   -s !TBG_steps                    \
                   --percent 1                      \
                   !TBG_disableGridAutoAdjustment   \
                   !TBG_version                     \
                   !TBG_movingWindow                \
                   !TBG_absorber                    \
                   !TBG_plugins"

# Total number of devices
TBG_tasks="$(( TBG_devices_x * TBG_devices_y * TBG_devices_z ))"

"$TBG_cfgPath"/submitAction.sh

