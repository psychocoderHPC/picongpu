/* Copyright 2013-2020 Axel Huebl, Heiko Burau, Rene Widera, Felix Schmitt,
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Configure existing or define new normalized density profiles here.
 * During particle species creation in speciesInitialization.param,
 * those profiles can be translated to spatial particle distributions.
 */

#pragma once

#include "picongpu/particles/densityProfiles/profiles.def"
/* preprocessor struct generator */
#include <pmacc/preprocessor/struct.hpp>


namespace picongpu
{
namespace SI
{
    /** Base density in particles per m^3 in the density profiles.
     *
     * This is often taken as reference maximum density in normalized profiles.
     * Individual particle species can define a `densityRatio` flag relative
     * to this value.
     *
     * unit: ELEMENTS/m^3
     *
     * We take n_e ("fully ionized") as reference density.
     * Our target material (see speciesDefinition) is a liquid crystal called
     * 8CB (4'-octyl-4-cyanobiphenyl).
     */
     constexpr float_64 nc = 1.11485e21 * 1.e6 / 0.8 / 0.8;
     constexpr float_64 BASE_DENSITY_SI = PARAM_TARGETDENS * nc;

} // namespace SI

namespace densityProfiles
{
    struct FlatFoilWithRampFunctor
    {
        /** This formula uses SI quantities only.
         *  The profile will be multiplied by BASE_DENSITY_SI.
         *
         * @param position_SI total offset including all slides [meter]
         * @param cellSize_SI cell sizes [meter]
         *
         * @return float_X density [normalized to 1.0]
         */
        HDINLINE float_X
        operator()(
            const floatD_64& position_SI,
            const float3_64& cellSize_SI
        )
        {
            float_64 dens = 0.0;
            const float2_64 cell( position_SI.x() / cellSize_SI.x(), position_SI.y() / cellSize_SI.y() );
            if(math::floor(cell.y()) == 8.0 && math::floor(cell.x()) == 8.0)
                dens = 1.0;
            return dens;
        }
    };

    // definition of free formula profile
    using FlatFoilWithRamp = FreeFormulaImpl< FlatFoilWithRampFunctor >;

    // put probe particles every 4th cell in X, Y(, Z)
    using ProbeEveryFourthCell = EveryNthCellImpl<
        mCT::UInt32<
            4,
            4,
            4
        >
    >;
} // namespace densityProfiles
} // namespace picongpu
