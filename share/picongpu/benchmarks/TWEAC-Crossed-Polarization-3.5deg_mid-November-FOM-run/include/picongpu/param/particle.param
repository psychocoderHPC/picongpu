/* Copyright 2013-2019 Axel Huebl, Rene Widera, Benjamin Worpitz,
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Configurations for particle manipulators. Set up and declare functors that
 * can be used in speciesInitalization.param for particle species
 * initialization and manipulation, such as temperature distributions, drifts,
 * pre-ionization and in-cell position.
 */

#pragma once

#include "picongpu/particles/filter/filter.def"
#include "picongpu/particles/manipulators/manipulators.def"
#include "picongpu/particles/startPosition/functors.def"
#include "pmacc/math/operation.hpp"

#include <pmacc/random/distributions/Uniform.hpp>


namespace picongpu
{
    namespace particles
    {
        /** a particle with a weighting below MIN_WEIGHTING will not
         *      be created / will be deleted
         *
         *  unit: none */
        constexpr float_X MIN_WEIGHTING = 0.001;

        /** Number of maximum particles per cell during density profile evaluation.
         *
         * Determines the weighting of a macro particle and with it, the number of
         * particles "sampling" dynamics in phase space.
         */
        constexpr uint32_t TYPICAL_PARTICLES_PER_CELL = 25u;


        namespace startPosition
        {
            struct RandomParameter
            {
                /** Count of particles per cell at initial state
                 *
                 *  unit: none */
                static constexpr uint32_t numParticlesPerCell = TYPICAL_PARTICLES_PER_CELL;
            };
            /** definition of random particle start */
            using Random = RandomImpl<RandomParameter>;

        } // namespace startPosition

        namespace manipulators
        {
            CONST_VECTOR(float_X, 3, DriftParamPositive_direction, 0.0, 1.0, 0.0);
            struct DriftParamPositive
            {
                /** Initial particle drift velocity for electrons and ions
                 *  Examples:
                 *    - No drift is equal to 1.0
                 *  unit: none
                 */
                static constexpr float_64 gamma = 1.21;
                const DriftParamPositive_direction_t direction;
            };
            using AssignYDriftPositive = unary::Drift<DriftParamPositive, pmacc::math::operation::Assign>;

            struct TemperatureParam
            {
                /* Initial temperature
                 *  unit: keV
                 */
                static constexpr float_64 temperature = 0.0005;
            };
            using AddTemperature = unary::Temperature<TemperatureParam>;

        } // namespace manipulators

    } // namespace particles
} // namespace picongpu
