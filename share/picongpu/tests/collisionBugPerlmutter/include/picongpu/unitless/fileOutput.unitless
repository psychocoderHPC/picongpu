/* Copyright 2023 Pawel Ordyna
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/algorithms/Velocity.hpp"
#include "picongpu/particles/particleToGrid/derivedAttributes/IsWeighted.hpp"
#include "picongpu/algorithms/Gamma.hpp"


namespace picongpu::particles::particleToGrid::derivedAttributes
{
    HDINLINE float1_64 DensityOverGammaSquared::getUnit() const
    {
        const float_64 UNIT_VOLUME = (UNIT_LENGTH * UNIT_LENGTH * UNIT_LENGTH);
        return particles::TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE / UNIT_VOLUME;
    }

    template<typename T_Particle>
    DINLINE float_X DensityOverGammaSquared::operator()(T_Particle& particle) const
    {
        const auto weighting = particle[weighting_];
        /* calculate new attribute */
        const auto particleDensity = weighting
            / (static_cast<float_X>(particles::TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE) * CELL_VOLUME);
        const auto mom = particle[momentum_];
        const auto mass = picongpu::traits::attribute::getMass(weighting, particle);
        Gamma<float_X> calcGamma;
        const auto gamma = calcGamma(mom, mass);

        return particleDensity / gamma / gamma;
    }

    //! This quantity is weighted and so it can be used to calculate an average value
    template<>
    struct IsWeighted<DensityOverGammaSquared> : std::true_type
    {
    };

} // namespace picongpu::particles::particleToGrid::derivedAttributes


#include "picongpu/particles/particleToGrid/CombinedDerive.hpp"
#include "picongpu/particles/particleToGrid/ComputeGridValuePerFrame.hpp"