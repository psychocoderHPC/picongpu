/* Copyright 2022-2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 * configuration file for atomicPhysics, also see speciesDefinition.param for further
 *  necessary settings to enable atomicPhysics.
 */

#pragma once

#include "picongpu/particles/atomicPhysics/ExponentialApproximationProbability.hpp"
#include "picongpu/particles/atomicPhysics/LinearApproximationProbability.hpp"
#include "picongpu/particles/atomicPhysics/atomicData/AtomicData.hpp"
#include "picongpu/particles/atomicPhysics/electronDistribution/LogSpaceHistogram.hpp"
#include "picongpu/particles/atomicPhysics/stateRepresentation/ConfigNumber.hpp"

#include <pmacc/identifier/value_identifier.hpp>

#include <cstdint>


namespace picongpu::atomicPhysics
{
    struct MaxEnergyParam
    {
        // eV
        static constexpr float_X maxEnergy = float_X(1.5e5);
    };
    using ElectronHistogram = particles::atomicPhysics::electronDistribution::LogSpaceHistogram<
        100u, // T_numberBins
        MaxEnergyParam>;

    // atomicPhysics rate solver settings
    //      atomicPhysics timeStepLength sub-stepping of numerical limit
    constexpr float_X timeStepAlpha = 0.3_X;

    //      which probability approximation to use for the acceptance step
    using ProbabilityApproximationFunctor = picongpu::particles::atomicPhysics::ExponentialApproximationProbability;

    // Argon Definition basics
    using configNumberStorageDataType_Cu = uint64_t;
    constexpr uint8_t protonNumber_Cu = 29u;
    constexpr uint8_t numLevels_Cu = 10u;

    /** atomicConfigNumber definition for species argon
     *
     * data type for ion atomic state storage of one species,
     *  actually object holding an analytic index corresponding to a super configuration.
     *
     * Must be defined for each ion species separately by giving the number of modeled
     * atomic levels N, the proton number Z and the data type to be used,
     *  eg. float_x, uint32_t, ..., for storage of index.
     *
     * See particles/atomicPhysics/stateRepresentation/ConfigNumber.hpp for further
     * information.
     *
     * @attention index variable must cover the number of states possible,
     * @attention actual data type must be defined separately from value_identifier,
     *  since all "," are interpreted as separating macro arguments
     */
    using ConfigNumber_Copper = particles::atomicPhysics::stateRepresentation::
        ConfigNumber<configNumberStorageDataType_Cu, numLevels_Cu, protonNumber_Cu>;

    // atomicData dataBase type
    using AtomicData_Cu = particles::atomicPhysics::atomicData::AtomicData<
        uint32_t, // T_Number
        float_X, // T_Value
        uint32_t, // T_CollectionIndex
        ConfigNumber_Copper, // T_ConfigNumber, data type used configNumber storage
        float_64, // T_Multiplicities, data type used for storage
        true, // T_electronicExcitation
        true, // T_electronicDeexcitation
        true, // T_spontaneousDeexcitation
        true, // T_electronicIonization
        true, // T_autonomousIonization
        false>; // T_fieldIonization
} // namespace picongpu::atomicPhysics
